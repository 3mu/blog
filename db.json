{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/me.jpg","path":"images/me.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1499147575817},{"_id":"public/2017/07/04/hello-world/index.html","hash":"bd97f248634f84343ef163446342d4066ce7d36e","modified":1499148112597},{"_id":"public/archives/index.html","hash":"e8349386a8df23bd56465243155e971e0a0c9e1f","modified":1499821413702},{"_id":"public/archives/2017/index.html","hash":"c850a379990cf430a07ef20314660a3b61020b6a","modified":1499821413700},{"_id":"public/archives/2017/07/index.html","hash":"d92a2e2fe9df816c017390ea9dd468b09106df0d","modified":1499821413700},{"_id":"public/index.html","hash":"b4b20d47223d25125cda6b7a183e09dfb4790a49","modified":1499821413702},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1495774850625},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1495774851056},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1495774850905},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1495774850973},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495774851057},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495774851059},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495774851060},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495774851061},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495774851061},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495774851063},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495774851064},{"_id":"source/about/index.md","hash":"f902f1600a26867287acb50132b05b98edb91e3c","modified":1495774850611},{"_id":"source/categories/index.md","hash":"525a5a61c70e8276466d1aec83aa7c4b25c00e6c","modified":1495774850615},{"_id":"source/tags/index.md","hash":"bc62d7832a91c37b527a6048f208623df188b56a","modified":1495774850620},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1495774851514},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495774851495},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495774851520},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495774851524},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1495774851536},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495774851545},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1495774851564},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495774851491},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1495774852207},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495774851528},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1495774851571},{"_id":"source/_posts/MVVM.md","hash":"81532371d60358f43827fff50f7d298478061a81","modified":1495774850529},{"_id":"source/_posts/SVNhook.md","hash":"cf98aa6df1111237362af594b88903bf7a860eb1","modified":1495774850540},{"_id":"source/_posts/hexo.md","hash":"53e9c2e65f4f0503d914d101e981a45b06a8e1d8","modified":1495774850550},{"_id":"themes/next/_config.yml","hash":"ec47d4e337b4478ab51bb9739c593de0f301b717","modified":1499821405138},{"_id":"source/_posts/index.md","hash":"8925d19766dc71d24e7537f62b30ec4f3e103bad","modified":1495774850567},{"_id":"source/_posts/nginx-tomcat.md","hash":"84a1557a33cb1abbf2845eb2123465405ed7dd3a","modified":1495774850581},{"_id":"source/_posts/redis.md","hash":"724d84b971bd3ec1139fddec66cd8fabad55411b","modified":1495774850585},{"_id":"source/_posts/spring.md","hash":"de7d4763909cb2dd871489977d4e4f1bc857a455","modified":1495774850596},{"_id":"source/_posts/sql.md","hash":"7bee7c20932fe88aa562a448a98675fb7eb7d712","modified":1495774850601},{"_id":"source/_posts/windbg.md","hash":"b0e1ca63ad99946ecd11a5ad8facef2cc478eecc","modified":1495775744589},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1495774851509},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1495774851502},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1495774851577},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1495774851583},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1495774851602},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1495774851606},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1495774851613},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1495774851617},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1495774851628},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1495774851597},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1495774851590},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1495774851623},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1495774851639},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1495774851633},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1495774851643},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1495774852187},{"_id":"themes/next/layout/_layout.swig","hash":"d1dac012da2632306d7fb162a86ab98880da4700","modified":1495774851660},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1495774852181},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1495774852193},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1495774852202},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1495774852216},{"_id":"themes/next/source/404.html","hash":"54f55e57235cfc23577f7a353d99956f24d13837","modified":1495774852270},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1495774852173},{"_id":"themes/next/source/favicon.ico","hash":"aee52f042b0099e610438522e1d4e5b9e90b36f7","modified":1495774852816},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1495774852198},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1495774853965},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1495774853999},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1495774852177},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1495774853982},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774852817},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495774851654},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495774851654},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1495774851664},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495774851681},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1495774851696},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495774851700},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1495774851676},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495774851692},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1495774851706},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1495774851732},{"_id":"themes/next/layout/_partials/header.swig","hash":"36dd0c57d0e309833977c606394969134fa35b43","modified":1495774851729},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1495774851716},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495774851834},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1495774851742},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495774851845},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1495774852160},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495774852225},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495774852233},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495774851840},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495774852255},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495774852262},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1495774851687},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495774851738},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495774852811},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495774852824},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495774852822},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495774852830},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495774852836},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495774852848},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495774852842},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495774852861},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495774852865},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495774852855},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495774852872},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495774852866},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495774852882},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495774852876},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495774852881},{"_id":"themes/next/source/images/me.jpg","hash":"537992046c2ce95bc77432897e08b10ab6725455","modified":1495774852871},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774851850},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774851851},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774852625},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774852625},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774852639},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495774852775},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495774851648},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495774851725},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495774851721},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495774851763},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1495774851746},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495774851769},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495774851807},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1495774851759},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495774851850},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1495774851653},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495774851855},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495774851821},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1495774851860},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1495774851957},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495774851800},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1495774852066},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495774852125},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495774852030},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1495774852624},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495774852098},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495774852630},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495774852639},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495774852143},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1495774852782},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1495774852795},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495774852775},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1495774852920},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495774852943},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495774852962},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495774852905},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1495774852930},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1495774852979},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495774853015},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495774853500},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495774853507},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"7a7caac709d182816bcaf85b685b5a60dde6a5e3","modified":1495774852803},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495774853520},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1495774853033},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495774853587},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495774853039},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1495774853582},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495774853604},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495774853701},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495774853787},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495774853775},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495774853782},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495774853763},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495774853806},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495774853818},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495774853858},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495774853863},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495774853599},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495774853516},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495774853961},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495774853925},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495774853593},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495774853943},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495774853759},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495774851877},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1495774851903},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1495774851932},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495774851951},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495774851908},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495774851918},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495774851985},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1495774851971},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1495774852274},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495774852279},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495774852283},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1495774852289},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495774851998},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1495774851898},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495774852500},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495774852372},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1495774852589},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495774852583},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495774852616},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1495774852598},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495774852647},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495774852660},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495774852604},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495774852611},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495774852667},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495774852694},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495774852713},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"50098b2406905789e6b07db6ea3dade666391674","modified":1495774852678},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495774852685},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495774852723},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495774852717},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495774852727},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1495774852739},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1495774852744},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1495774852733},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495774852754},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1495774852748},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495774852722},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1495774852990},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495774853363},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495774853364},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495774853366},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1495774852763},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495774853368},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495774853450},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495774853370},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495774853371},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495774853473},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495774853575},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1495774853610},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495774853616},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1495774853624},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495774852655},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1495774852768},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495774853538},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495774853495},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495774853836},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495774853853},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1495774853634},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1495774853661},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495774853895},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495774852294},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495774852316},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495774852299},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1495774852312},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495774852322},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495774852327},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495774852305},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495774852348},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495774852355},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495774852343},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495774852365},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1495774852332},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495774852338},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495774852360},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1495774852394},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e28c805011f65b54060f03be90ec5a23714c4985","modified":1495774852405},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1495774853696},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1495774853692},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"c38affc978c7ba3d4a63daf594554ca5a346cbdc","modified":1495774852382},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1495774852416},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1495774852410},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495774852387},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495774852399},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495774852424},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1495774852445},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"55429af6f108d4d9e40bc82d990699e18d409d4a","modified":1495774852433},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495774852441},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495774852450},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495774852428},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495774852458},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1495774852462},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495774852479},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495774852475},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495774852490},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495774852523},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495774852495},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1495774852483},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495774852530},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495774852510},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1495774852518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495774852466},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1495774852540},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1495774852533},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495774852545},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1495774852550},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1495774852575},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495774852560},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495774852556},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1495774852569},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1495774852703},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1495774852728},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495774853409},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495774853425},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495774853429},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495774853379},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495774852698},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495774853373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495774853445},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1495774853685},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495774853360},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1495774853679},{"_id":"public/about/index.html","hash":"0fbcb7f9d909b2266b4416f5b2cabffd78addf19","modified":1499821413698},{"_id":"public/categories/index.html","hash":"492ebab8f437931a2185229662a938ecfbb63e80","modified":1499821413699},{"_id":"public/tags/index.html","hash":"e1fc4870dbfec67ef4b488b82e9d3bcc026563e4","modified":1499821413700},{"_id":"public/2017/01/10/redis/index.html","hash":"3becb98d653632963bb4b1748d7906802eadac3d","modified":1499821413700},{"_id":"public/archives/2016/index.html","hash":"383cb8066d8be567f8eb73626957d1c3c4a0d773","modified":1499821413700},{"_id":"public/archives/2016/12/index.html","hash":"90d9f2f00bba8ecd790f602925c322dc3e113ca0","modified":1499821413700},{"_id":"public/archives/2017/01/index.html","hash":"003f67fd6792cc218c300e94524111558d4db65c","modified":1499821413700},{"_id":"public/archives/2017/02/index.html","hash":"994e38c8c30bbc6b9ad268a88e31a9a9e47cd37b","modified":1499821413700},{"_id":"public/tags/MVVM/index.html","hash":"9ba32bba3f307d53d2e5dc8746e92184a8ed5268","modified":1499821413700},{"_id":"public/tags/hexo/index.html","hash":"abb6fef293cc3b0985b700f3035180abce1996e2","modified":1499821413700},{"_id":"public/tags/前端/index.html","hash":"29fc946334dc075288cc7fb01d405183d9536ab0","modified":1499821413701},{"_id":"public/tags/tomact/index.html","hash":"6f98a78d5aeceb91588c6c2ea33fdc09368a2a2b","modified":1499821413701},{"_id":"public/tags/SVN/index.html","hash":"b8bc171a5a34f1a2208ec0d9fa403c7c52c51c6f","modified":1499821413701},{"_id":"public/tags/redis/index.html","hash":"541f8c60e7c9440f5e9c70a457257cf6ec0d475c","modified":1499821413701},{"_id":"public/tags/Windbg/index.html","hash":"375f6101cad8773fd4081f3388b762277afe2d32","modified":1499821413701},{"_id":"public/tags/spring/index.html","hash":"96baa87d7e649d3c46af9efac719f9be9f80178c","modified":1499821413701},{"_id":"public/2017/02/08/windbg/index.html","hash":"8b266ed8fb19c98ff42cbd39fd38be4c537c274a","modified":1499821413701},{"_id":"public/2017/02/07/index/index.html","hash":"c8854c6f805737c05a33f6b9cc62232d0e5a6bdd","modified":1499821413701},{"_id":"public/2016/12/19/spring/index.html","hash":"1f304681851b5fb54af73163199ad1078aca5455","modified":1499821413701},{"_id":"public/2016/12/15/nginx-tomcat/index.html","hash":"ae3b4739e87ec6f2b8fc72ef47c86f4e3c0b79d1","modified":1499821413701},{"_id":"public/2016/12/11/sql/index.html","hash":"4fe550a4b78d773aa933cc17e45e227882252268","modified":1499821413701},{"_id":"public/2016/12/09/MVVM/index.html","hash":"a7ad3cab3a0e69db7591bb9a8959ba2877b253a3","modified":1499821413701},{"_id":"public/2016/12/09/hexo/index.html","hash":"febe2ebb5080a4a31ee1873b391af1349cff0ebe","modified":1499821413701},{"_id":"public/2016/12/08/SVNhook/index.html","hash":"d7051cc6ac0389d1f285e671e7644d09618bb9f8","modified":1499821413702},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1499148112647},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1499148112647},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499148112647},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499148112647},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499148112647},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499148112647},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499148112647},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499148112647},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499148112647},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1499148112647},{"_id":"public/favicon.ico","hash":"aee52f042b0099e610438522e1d4e5b9e90b36f7","modified":1499148112647},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499148112647},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1499148112647},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1499148112647},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1499148112648},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1499148112648},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1499148112648},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1499148112648},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1499148112648},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1499148112648},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499148112649},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499148112649},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499148112649},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1499148112649},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1499148112649},{"_id":"public/images/me.jpg","hash":"537992046c2ce95bc77432897e08b10ab6725455","modified":1499148112649},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1499148112649},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1499148112649},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499148112649},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499148112649},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499148112649},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499148112650},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499148112650},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499148112650},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1499148112650},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499148112650},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1499148114353},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1499148114359},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1499148114367},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1499148114367},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1499148114367},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499148114386},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499148114386},{"_id":"public/404.html","hash":"e6b7fbdbafebf37cb4f99f5f12076dc35abf8564","modified":1499148114386},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1499148114386},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1499148114386},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1499148114386},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499148114386},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499148114386},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499148114386},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1499148114386},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1499148114386},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499148114386},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1499148114387},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1499148114387},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499148114387},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1499148114387},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1499148114387},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1499148114387},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1499148114387},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499148114387},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499148114387},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1499148114387},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1499148114387},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499148114387},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1499148114387},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499148114387},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499148114387},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499148114388},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499148114388},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499148114390},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499148114390},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499148114390},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499148114390},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499148114391},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1499148114391},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1499148114391},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1499148114391},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1499148114391},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1499148114391},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1499148114391},{"_id":"public/css/main.css","hash":"b5f1efb370ad2948691ea338e13f080924560dcc","modified":1499148114391},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499148114391},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499148114391},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499148114391},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499148114391},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1499148114391},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1499148114391},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499148114392},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499148114392},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499148114392},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499148114392},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1499148114392},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1499148114406},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1499148114406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1499148114459},{"_id":"source/_posts/webmagicinit.md","hash":"54d6f16e66cb551f36fe859e82fb19e4897c5602","modified":1499821344585},{"_id":"public/tags/webmagic/index.html","hash":"d20d2a8a12e3d15beeb217c03042609d31f5db9e","modified":1499821413701},{"_id":"public/2017/07/10/webmagicinit/index.html","hash":"16afbfb52147fe2f52f365367e27fee6e1097bee","modified":1499821413701}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-12-10T12:49:29.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-12-10 20:49:29\ntype: about\ncomments: false\n---\n","updated":"2017-05-26T05:00:50.611Z","path":"about/index.html","_id":"cj4p62jdf000p80vpfe4uy7ol","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2016-12-10T12:47:27.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-10 20:47:27\ntype: categories\ncomments: false\n---\n","updated":"2017-05-26T05:00:50.615Z","path":"categories/index.html","_id":"cj4p62jdt000q80vp6znumnaa","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-12-10T12:44:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-10 20:44:21\ntype: tags\ncomments: false\n---\n","updated":"2017-05-26T05:00:50.620Z","path":"tags/index.html","_id":"cj4p62jdy000r80vp8xxcf59i","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"MVVM","date":"2016-12-09T15:24:00.000Z","_content":"# 概述\n![](http://ohugkp1mj.bkt.clouddn.com/mvvm.jpg)\n+ MVVM 框架 有几大优点\n1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。\n4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写\n<!-- more -->\n## 架构\n1. Vue\n2. WPF MvvmLight\n","source":"_posts/MVVM.md","raw":"---\ntitle: MVVM\ndate: 2016-12-09 23:24:00\ntags: MVVM\n---\n# 概述\n![](http://ohugkp1mj.bkt.clouddn.com/mvvm.jpg)\n+ MVVM 框架 有几大优点\n1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。\n4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写\n<!-- more -->\n## 架构\n1. Vue\n2. WPF MvvmLight\n","slug":"MVVM","published":1,"updated":"2017-05-26T05:00:50.529Z","_id":"cj4p62h5z000080vptcnicri0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><img src=\"http://ohugkp1mj.bkt.clouddn.com/mvvm.jpg\" alt=\"\"></p>\n<ul>\n<li>MVVM 框架 有几大优点</li>\n</ul>\n<ol>\n<li>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。</li>\n<li>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写<a id=\"more\"></a>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2></li>\n<li>Vue</li>\n<li>WPF MvvmLight</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><img src=\"http://ohugkp1mj.bkt.clouddn.com/mvvm.jpg\" alt=\"\"></p>\n<ul>\n<li>MVVM 框架 有几大优点</li>\n</ul>\n<ol>\n<li>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。</li>\n<li>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写","more":"<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2></li>\n<li>Vue</li>\n<li>WPF MvvmLight</li>\n</ol>"},{"title":"hexo 命令备忘","date":"2016-12-09T14:51:54.000Z","_content":"\n# 安装\n\n+ nodejs[下载](https://nodejs.org/en/) \n\n```js\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n<!-- more -->\n# 简写\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n\n","source":"_posts/hexo.md","raw":"---\ntitle: hexo 命令备忘\ndate: 2016-12-09 22:51:54\ntags: hexo\n---\n\n# 安装\n\n+ nodejs[下载](https://nodejs.org/en/) \n\n```js\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n<!-- more -->\n# 简写\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n\n","slug":"hexo","published":1,"updated":"2017-05-26T05:00:50.550Z","_id":"cj4p62h6l000380vpg45iwcq0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>nodejs<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">下载</a> </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class=\"line\">hexo p == hexo publish</div><div class=\"line\">hexo g == hexo generate#生成</div><div class=\"line\">hexo s == hexo server #启动服务预览</div><div class=\"line\">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>nodejs<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">下载</a> </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>","more":"<h1 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class=\"line\">hexo p == hexo publish</div><div class=\"line\">hexo g == hexo generate#生成</div><div class=\"line\">hexo s == hexo server #启动服务预览</div><div class=\"line\">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>"},{"title":"npm镜像","date":"2017-02-07T04:59:53.000Z","_content":"# 国内优秀npm镜像推荐及使用\n  npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用\n## 国内优秀npm镜像\n----\n### 淘宝npm镜像\n+ 搜索地址：http://npm.taobao.org/\n+ registry地址：http://registry.npm.taobao.org/\n### cnpmjs镜像\n+ 搜索地址：http://cnpmjs.org/\n+ registry地址：http://r.cnpmjs.org/\n## 如何使用\n 有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n### 临时使用\n ```node\n npm --registry https://registry.npm.taobao.org install express\n ```\n### 持久使用\n```node\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 通过cnpm使用\n```node\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n\n\n\n","source":"_posts/index.md","raw":"---\ntitle: npm镜像\ndate: 2017-02-07 12:59:53\ntags: 前端\n---\n# 国内优秀npm镜像推荐及使用\n  npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用\n## 国内优秀npm镜像\n----\n### 淘宝npm镜像\n+ 搜索地址：http://npm.taobao.org/\n+ registry地址：http://registry.npm.taobao.org/\n### cnpmjs镜像\n+ 搜索地址：http://cnpmjs.org/\n+ registry地址：http://r.cnpmjs.org/\n## 如何使用\n 有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n### 临时使用\n ```node\n npm --registry https://registry.npm.taobao.org install express\n ```\n### 持久使用\n```node\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 通过cnpm使用\n```node\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n\n\n\n","slug":"index","published":1,"updated":"2017-05-26T05:00:50.567Z","_id":"cj4p62h6n000480vp7bwdat40","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"国内优秀npm镜像推荐及使用\"><a href=\"#国内优秀npm镜像推荐及使用\" class=\"headerlink\" title=\"国内优秀npm镜像推荐及使用\"></a>国内优秀npm镜像推荐及使用</h1><p>  npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用</p>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><hr>\n<h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org/</a><h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3></li>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://r.cnpmjs.org/</a><h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：<h3 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm --registry https://registry.npm.taobao.org install express</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"持久使用\"><a href=\"#持久使用\" class=\"headerlink\" title=\"持久使用\"></a>持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 配置后可通过下面方式来验证是否成功</div><div class=\"line\">npm config get registry</div><div class=\"line\">// 或</div><div class=\"line\">npm info express</div></pre></td></tr></table></figure>\n<h3 id=\"通过cnpm使用\"><a href=\"#通过cnpm使用\" class=\"headerlink\" title=\"通过cnpm使用\"></a>通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 使用</div><div class=\"line\">cnpm install express</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"国内优秀npm镜像推荐及使用\"><a href=\"#国内优秀npm镜像推荐及使用\" class=\"headerlink\" title=\"国内优秀npm镜像推荐及使用\"></a>国内优秀npm镜像推荐及使用</h1><p>  npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用</p>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><hr>\n<h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org/</a><h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3></li>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://r.cnpmjs.org/</a><h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：<h3 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm --registry https://registry.npm.taobao.org install express</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"持久使用\"><a href=\"#持久使用\" class=\"headerlink\" title=\"持久使用\"></a>持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 配置后可通过下面方式来验证是否成功</div><div class=\"line\">npm config get registry</div><div class=\"line\">// 或</div><div class=\"line\">npm info express</div></pre></td></tr></table></figure>\n<h3 id=\"通过cnpm使用\"><a href=\"#通过cnpm使用\" class=\"headerlink\" title=\"通过cnpm使用\"></a>通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 使用</div><div class=\"line\">cnpm install express</div></pre></td></tr></table></figure>\n"},{"title":"nginx_tomcat(转)","date":"2016-12-15T04:45:39.000Z","_content":"# 搭建Nginx+Java环境\n\nApache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。\n\n接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。\n\nNginx可以通过以下两种方式来实现与Tomcat的耦合：\n\n将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。\n\n将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能进行多台Tomcat服务器的负载均衡。\n\n下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式\n## 动态页面与静态页面分离的实例\n```config\nserver {  \n      listen 80;  \n      server_name www.ixdba.net;  \n      root /web/www/html;  \n \nlocation /img/ {  \n      alias /web/www/html/img/;  \n}  \n \nlocation ~ (\\.jsp)|(\\.do)$ {  \n     proxy_pass http://192.168.12.130:8080;  \n     proxy_redirect off;  \n     proxy_set_header Host $host;  \n     proxy_set_header X-Real-IP $remote_addr;  \n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  \n     client_max_body_size 10m;  \n     client_body_buffer_size 128k;  \n     proxy_connect_timeout 90;  \n     proxy_send_timeout 90;  \n     proxy_read_timeout 90;  \n     proxy_buffer_size 4k;  \n     proxy_buffers 4 32k;  \n     proxy_busy_buffers_size 64k;  \n     proxy_temp_file_write_size 64k;  \n } \n} \n```\n在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理，即http://192.168.12.130:8080。\n\n需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的代理路径不能含有地址链接，也就是不能写成http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。\n## 多个Tomcat负载均衡的实例\n这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：\n```config\n192.168.12.131:8000  \n192.168.12.132:8080  \n192.168.12.133:8090 \n```\nNginx的相关配置代码如下：\n```config\nupstream mytomcats {  \n      server 192.168.12.131:8000;  \n      server 192.168.12.132:8080;  \n      server 192.168.12.133:8090;  \n}  \n \nserver {  \n      listen 80;  \n      server_name www.ixdba.net;  \n \nlocation ~* \\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ {  \n       root /web/www/html/;  \n}  \n \nlocation / {  \n          proxy_pass http://mytomcats;  \n          proxy_redirect off;  \n          proxy_set_header Host $host;  \n          proxy_set_header X-Real-IP $remote_addr;  \n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  \n          client_max_body_size 10m;  \n          client_body_buffer_size 128k;  \n          proxy_connect_timeout 90;  \n          proxy_send_timeout 90;  \n          proxy_read_timeout 90;  \n          proxy_buffer_size 4k;  \n          proxy_buffers 4 32k;  \n          proxy_busy_buffers_size 64k;  \n          proxy_temp_file_write_size 64k;  \n}  \n \n} \n```\n在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就是上面指定的3台Tomcat服务器；接着通过server指令定义一个www.ixdba.net的虚拟主机；然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理；最后将其他所有请求全部交给负载均衡组来处理。\n\n这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx是不支持的。","source":"_posts/nginx-tomcat.md","raw":"---\ntitle: nginx_tomcat(转)\ndate: 2016-12-15 12:45:39\ntags: tomact\n---\n# 搭建Nginx+Java环境\n\nApache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。\n\n接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。\n\nNginx可以通过以下两种方式来实现与Tomcat的耦合：\n\n将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。\n\n将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能进行多台Tomcat服务器的负载均衡。\n\n下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式\n## 动态页面与静态页面分离的实例\n```config\nserver {  \n      listen 80;  \n      server_name www.ixdba.net;  \n      root /web/www/html;  \n \nlocation /img/ {  \n      alias /web/www/html/img/;  \n}  \n \nlocation ~ (\\.jsp)|(\\.do)$ {  \n     proxy_pass http://192.168.12.130:8080;  \n     proxy_redirect off;  \n     proxy_set_header Host $host;  \n     proxy_set_header X-Real-IP $remote_addr;  \n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  \n     client_max_body_size 10m;  \n     client_body_buffer_size 128k;  \n     proxy_connect_timeout 90;  \n     proxy_send_timeout 90;  \n     proxy_read_timeout 90;  \n     proxy_buffer_size 4k;  \n     proxy_buffers 4 32k;  \n     proxy_busy_buffers_size 64k;  \n     proxy_temp_file_write_size 64k;  \n } \n} \n```\n在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理，即http://192.168.12.130:8080。\n\n需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的代理路径不能含有地址链接，也就是不能写成http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。\n## 多个Tomcat负载均衡的实例\n这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：\n```config\n192.168.12.131:8000  \n192.168.12.132:8080  \n192.168.12.133:8090 \n```\nNginx的相关配置代码如下：\n```config\nupstream mytomcats {  \n      server 192.168.12.131:8000;  \n      server 192.168.12.132:8080;  \n      server 192.168.12.133:8090;  \n}  \n \nserver {  \n      listen 80;  \n      server_name www.ixdba.net;  \n \nlocation ~* \\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ {  \n       root /web/www/html/;  \n}  \n \nlocation / {  \n          proxy_pass http://mytomcats;  \n          proxy_redirect off;  \n          proxy_set_header Host $host;  \n          proxy_set_header X-Real-IP $remote_addr;  \n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  \n          client_max_body_size 10m;  \n          client_body_buffer_size 128k;  \n          proxy_connect_timeout 90;  \n          proxy_send_timeout 90;  \n          proxy_read_timeout 90;  \n          proxy_buffer_size 4k;  \n          proxy_buffers 4 32k;  \n          proxy_busy_buffers_size 64k;  \n          proxy_temp_file_write_size 64k;  \n}  \n \n} \n```\n在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就是上面指定的3台Tomcat服务器；接着通过server指令定义一个www.ixdba.net的虚拟主机；然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理；最后将其他所有请求全部交给负载均衡组来处理。\n\n这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx是不支持的。","slug":"nginx-tomcat","published":1,"updated":"2017-05-26T05:00:50.581Z","_id":"cj4p62h6w000680vp42dgytw8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建Nginx-Java环境\"><a href=\"#搭建Nginx-Java环境\" class=\"headerlink\" title=\"搭建Nginx+Java环境\"></a>搭建Nginx+Java环境</h1><p>Apache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。</p>\n<p>接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。</p>\n<p>Nginx可以通过以下两种方式来实现与Tomcat的耦合：</p>\n<p>将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。</p>\n<p>将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能进行多台Tomcat服务器的负载均衡。</p>\n<p>下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式</p>\n<h2 id=\"动态页面与静态页面分离的实例\"><a href=\"#动态页面与静态页面分离的实例\" class=\"headerlink\" title=\"动态页面与静态页面分离的实例\"></a>动态页面与静态页面分离的实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;  </div><div class=\"line\">      listen 80;  </div><div class=\"line\">      server_name www.ixdba.net;  </div><div class=\"line\">      root /web/www/html;  </div><div class=\"line\"> </div><div class=\"line\">location /img/ &#123;  </div><div class=\"line\">      alias /web/www/html/img/;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">location ~ (\\.jsp)|(\\.do)$ &#123;  </div><div class=\"line\">     proxy_pass http://192.168.12.130:8080;  </div><div class=\"line\">     proxy_redirect off;  </div><div class=\"line\">     proxy_set_header Host $host;  </div><div class=\"line\">     proxy_set_header X-Real-IP $remote_addr;  </div><div class=\"line\">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">     client_max_body_size 10m;  </div><div class=\"line\">     client_body_buffer_size 128k;  </div><div class=\"line\">     proxy_connect_timeout 90;  </div><div class=\"line\">     proxy_send_timeout 90;  </div><div class=\"line\">     proxy_read_timeout 90;  </div><div class=\"line\">     proxy_buffer_size 4k;  </div><div class=\"line\">     proxy_buffers 4 32k;  </div><div class=\"line\">     proxy_busy_buffers_size 64k;  </div><div class=\"line\">     proxy_temp_file_write_size 64k;  </div><div class=\"line\"> &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理，即<a href=\"http://192.168.12.130:8080。\" target=\"_blank\" rel=\"external\">http://192.168.12.130:8080。</a></p>\n<p>需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的代理路径不能含有地址链接，也就是不能写成<a href=\"http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。\" target=\"_blank\" rel=\"external\">http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。</a></p>\n<h2 id=\"多个Tomcat负载均衡的实例\"><a href=\"#多个Tomcat负载均衡的实例\" class=\"headerlink\" title=\"多个Tomcat负载均衡的实例\"></a>多个Tomcat负载均衡的实例</h2><p>这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.12.131:8000  </div><div class=\"line\">192.168.12.132:8080  </div><div class=\"line\">192.168.12.133:8090</div></pre></td></tr></table></figure></p>\n<p>Nginx的相关配置代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream mytomcats &#123;  </div><div class=\"line\">      server 192.168.12.131:8000;  </div><div class=\"line\">      server 192.168.12.132:8080;  </div><div class=\"line\">      server 192.168.12.133:8090;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">server &#123;  </div><div class=\"line\">      listen 80;  </div><div class=\"line\">      server_name www.ixdba.net;  </div><div class=\"line\"> </div><div class=\"line\">location ~* \\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;  </div><div class=\"line\">       root /web/www/html/;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">location / &#123;  </div><div class=\"line\">          proxy_pass http://mytomcats;  </div><div class=\"line\">          proxy_redirect off;  </div><div class=\"line\">          proxy_set_header Host $host;  </div><div class=\"line\">          proxy_set_header X-Real-IP $remote_addr;  </div><div class=\"line\">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">          client_max_body_size 10m;  </div><div class=\"line\">          client_body_buffer_size 128k;  </div><div class=\"line\">          proxy_connect_timeout 90;  </div><div class=\"line\">          proxy_send_timeout 90;  </div><div class=\"line\">          proxy_read_timeout 90;  </div><div class=\"line\">          proxy_buffer_size 4k;  </div><div class=\"line\">          proxy_buffers 4 32k;  </div><div class=\"line\">          proxy_busy_buffers_size 64k;  </div><div class=\"line\">          proxy_temp_file_write_size 64k;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就是上面指定的3台Tomcat服务器；接着通过server指令定义一个www.ixdba.net的虚拟主机；然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理；最后将其他所有请求全部交给负载均衡组来处理。</p>\n<p>这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx是不支持的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Nginx-Java环境\"><a href=\"#搭建Nginx-Java环境\" class=\"headerlink\" title=\"搭建Nginx+Java环境\"></a>搭建Nginx+Java环境</h1><p>Apache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。</p>\n<p>接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。</p>\n<p>Nginx可以通过以下两种方式来实现与Tomcat的耦合：</p>\n<p>将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。</p>\n<p>将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能进行多台Tomcat服务器的负载均衡。</p>\n<p>下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式</p>\n<h2 id=\"动态页面与静态页面分离的实例\"><a href=\"#动态页面与静态页面分离的实例\" class=\"headerlink\" title=\"动态页面与静态页面分离的实例\"></a>动态页面与静态页面分离的实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;  </div><div class=\"line\">      listen 80;  </div><div class=\"line\">      server_name www.ixdba.net;  </div><div class=\"line\">      root /web/www/html;  </div><div class=\"line\"> </div><div class=\"line\">location /img/ &#123;  </div><div class=\"line\">      alias /web/www/html/img/;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">location ~ (\\.jsp)|(\\.do)$ &#123;  </div><div class=\"line\">     proxy_pass http://192.168.12.130:8080;  </div><div class=\"line\">     proxy_redirect off;  </div><div class=\"line\">     proxy_set_header Host $host;  </div><div class=\"line\">     proxy_set_header X-Real-IP $remote_addr;  </div><div class=\"line\">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">     client_max_body_size 10m;  </div><div class=\"line\">     client_body_buffer_size 128k;  </div><div class=\"line\">     proxy_connect_timeout 90;  </div><div class=\"line\">     proxy_send_timeout 90;  </div><div class=\"line\">     proxy_read_timeout 90;  </div><div class=\"line\">     proxy_buffer_size 4k;  </div><div class=\"line\">     proxy_buffers 4 32k;  </div><div class=\"line\">     proxy_busy_buffers_size 64k;  </div><div class=\"line\">     proxy_temp_file_write_size 64k;  </div><div class=\"line\"> &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/www/html/img/目录下的静态文件交给Nginx来完成。最后一个location指令将所有以.jsp、.do结尾的文件都交给Tomcat服务器的8080端口来处理，即<a href=\"http://192.168.12.130:8080。\" target=\"_blank\" rel=\"external\">http://192.168.12.130:8080。</a></p>\n<p>需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的代理路径不能含有地址链接，也就是不能写成<a href=\"http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。\" target=\"_blank\" rel=\"external\">http://192.168.12.130:8080/，或者类似http://192.168.12.130:8080/jsp的形式。在location指令不使用正则表达式时，没有此限制。</a></p>\n<h2 id=\"多个Tomcat负载均衡的实例\"><a href=\"#多个Tomcat负载均衡的实例\" class=\"headerlink\" title=\"多个Tomcat负载均衡的实例\"></a>多个Tomcat负载均衡的实例</h2><p>这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.12.131:8000  </div><div class=\"line\">192.168.12.132:8080  </div><div class=\"line\">192.168.12.133:8090</div></pre></td></tr></table></figure></p>\n<p>Nginx的相关配置代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream mytomcats &#123;  </div><div class=\"line\">      server 192.168.12.131:8000;  </div><div class=\"line\">      server 192.168.12.132:8080;  </div><div class=\"line\">      server 192.168.12.133:8090;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">server &#123;  </div><div class=\"line\">      listen 80;  </div><div class=\"line\">      server_name www.ixdba.net;  </div><div class=\"line\"> </div><div class=\"line\">location ~* \\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;  </div><div class=\"line\">       root /web/www/html/;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">location / &#123;  </div><div class=\"line\">          proxy_pass http://mytomcats;  </div><div class=\"line\">          proxy_redirect off;  </div><div class=\"line\">          proxy_set_header Host $host;  </div><div class=\"line\">          proxy_set_header X-Real-IP $remote_addr;  </div><div class=\"line\">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </div><div class=\"line\">          client_max_body_size 10m;  </div><div class=\"line\">          client_body_buffer_size 128k;  </div><div class=\"line\">          proxy_connect_timeout 90;  </div><div class=\"line\">          proxy_send_timeout 90;  </div><div class=\"line\">          proxy_read_timeout 90;  </div><div class=\"line\">          proxy_buffer_size 4k;  </div><div class=\"line\">          proxy_buffers 4 32k;  </div><div class=\"line\">          proxy_busy_buffers_size 64k;  </div><div class=\"line\">          proxy_temp_file_write_size 64k;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就是上面指定的3台Tomcat服务器；接着通过server指令定义一个www.ixdba.net的虚拟主机；然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理；最后将其他所有请求全部交给负载均衡组来处理。</p>\n<p>这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx是不支持的。</p>\n"},{"title":"SVN 没有填写备注不允许提交","date":"2016-12-08T06:34:55.000Z","_content":"\n```bat\n@echo off\nSET SVN_LOOK=\"C:\\Program Files (x86)\\VisualSVN Server\\bin\\svnlook.exe\"\nSET SVN_STYLECOP=C:\\SVNStyleCop\\SVNStyleCop.exe\n\nSET REV_OR_TRAN=transaction\n\nIF \"%3\" == \"test\" SET REV_OR_TRAN=revision\n\n%SVN_STYLECOP% -repository:%1 -%REV_OR_TRAN%:%2\nIF %ERRORLEVEL% EQU 0 GOTO STYLECOP_OK\nEXIT %ERRORLEVEL%\n\n:STYLECOP_OK\n%SVN_LOOK% log --%REV_OR_TRAN% %2 %1 | FindStr .\nIF %ERRORLEVEL% EQU 0 GOTO FINAL_OK\nECHO \"提交必须填写描述\" >&2\nEXIT -1\n\n:FINAL_OK\nEXIT 0\n\n:FINAL_OK\nEXIT 0\n```\n<!-- more -->","source":"_posts/SVNhook.md","raw":"---\ntitle: SVN 没有填写备注不允许提交\ndate: 2016-12-08 14:34:55\ntags: SVN\n---\n\n```bat\n@echo off\nSET SVN_LOOK=\"C:\\Program Files (x86)\\VisualSVN Server\\bin\\svnlook.exe\"\nSET SVN_STYLECOP=C:\\SVNStyleCop\\SVNStyleCop.exe\n\nSET REV_OR_TRAN=transaction\n\nIF \"%3\" == \"test\" SET REV_OR_TRAN=revision\n\n%SVN_STYLECOP% -repository:%1 -%REV_OR_TRAN%:%2\nIF %ERRORLEVEL% EQU 0 GOTO STYLECOP_OK\nEXIT %ERRORLEVEL%\n\n:STYLECOP_OK\n%SVN_LOOK% log --%REV_OR_TRAN% %2 %1 | FindStr .\nIF %ERRORLEVEL% EQU 0 GOTO FINAL_OK\nECHO \"提交必须填写描述\" >&2\nEXIT -1\n\n:FINAL_OK\nEXIT 0\n\n:FINAL_OK\nEXIT 0\n```\n<!-- more -->","slug":"SVNhook","published":1,"updated":"2017-05-26T05:00:50.540Z","_id":"cj4p62j9x000c80vplzznczd9","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"><span class=\"built_in\">SET</span> SVN_LOOK=\"C:\\Program Files (x86)\\VisualSVN Server\\bin\\svnlook.exe\"</div><div class=\"line\"><span class=\"built_in\">SET</span> SVN_STYLECOP=C:\\SVNStyleCop\\SVNStyleCop.exe</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">SET</span> REV_OR_TRAN=transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">IF</span> \"%<span class=\"number\">3</span>\" == \"test\" <span class=\"built_in\">SET</span> REV_OR_TRAN=revision</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">%SVN_STYLECOP%</span> -repository:%<span class=\"number\">1</span> -<span class=\"variable\">%REV_OR_TRAN%</span>:%<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">IF</span> <span class=\"variable\">%ERRORLEVEL%</span> <span class=\"keyword\">EQU</span> <span class=\"number\">0</span> <span class=\"keyword\">GOTO</span> STYLECOP_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"variable\">%ERRORLEVEL%</span></div><div class=\"line\"></div><div class=\"line\">:STYLECOP_OK</div><div class=\"line\"><span class=\"variable\">%SVN_LOOK%</span> log --<span class=\"variable\">%REV_OR_TRAN%</span> %<span class=\"number\">2</span> %<span class=\"number\">1</span> | <span class=\"built_in\">FindStr</span> .</div><div class=\"line\"><span class=\"keyword\">IF</span> <span class=\"variable\">%ERRORLEVEL%</span> <span class=\"keyword\">EQU</span> <span class=\"number\">0</span> <span class=\"keyword\">GOTO</span> FINAL_OK</div><div class=\"line\"><span class=\"built_in\">ECHO</span> \"提交必须填写描述\" &gt;&amp;<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">EXIT</span> -<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">:FINAL_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">:FINAL_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"><span class=\"built_in\">SET</span> SVN_LOOK=\"C:\\Program Files (x86)\\VisualSVN Server\\bin\\svnlook.exe\"</div><div class=\"line\"><span class=\"built_in\">SET</span> SVN_STYLECOP=C:\\SVNStyleCop\\SVNStyleCop.exe</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">SET</span> REV_OR_TRAN=transaction</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">IF</span> \"%<span class=\"number\">3</span>\" == \"test\" <span class=\"built_in\">SET</span> REV_OR_TRAN=revision</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">%SVN_STYLECOP%</span> -repository:%<span class=\"number\">1</span> -<span class=\"variable\">%REV_OR_TRAN%</span>:%<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">IF</span> <span class=\"variable\">%ERRORLEVEL%</span> <span class=\"keyword\">EQU</span> <span class=\"number\">0</span> <span class=\"keyword\">GOTO</span> STYLECOP_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"variable\">%ERRORLEVEL%</span></div><div class=\"line\"></div><div class=\"line\">:STYLECOP_OK</div><div class=\"line\"><span class=\"variable\">%SVN_LOOK%</span> log --<span class=\"variable\">%REV_OR_TRAN%</span> %<span class=\"number\">2</span> %<span class=\"number\">1</span> | <span class=\"built_in\">FindStr</span> .</div><div class=\"line\"><span class=\"keyword\">IF</span> <span class=\"variable\">%ERRORLEVEL%</span> <span class=\"keyword\">EQU</span> <span class=\"number\">0</span> <span class=\"keyword\">GOTO</span> FINAL_OK</div><div class=\"line\"><span class=\"built_in\">ECHO</span> \"提交必须填写描述\" &gt;&amp;<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">EXIT</span> -<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">:FINAL_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">:FINAL_OK</div><div class=\"line\"><span class=\"keyword\">EXIT</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>","more":""},{"title":"redis","date":"2017-01-10T04:56:05.000Z","_content":"## redis 启动与停止\n\n```shell\nredis-server redis.conf\nredis-cli shutdown\n```\n<!--more-->","source":"_posts/redis.md","raw":"---\ntitle: redis\ndate: 2017-01-10 12:56:05\ntags: redis\n---\n## redis 启动与停止\n\n```shell\nredis-server redis.conf\nredis-cli shutdown\n```\n<!--more-->","slug":"redis","published":1,"updated":"2017-05-26T05:00:50.585Z","_id":"cj4p62ja2000d80vp915k4zo0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"redis-启动与停止\"><a href=\"#redis-启动与停止\" class=\"headerlink\" title=\"redis 启动与停止\"></a>redis 启动与停止</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server redis.conf</div><div class=\"line\">redis-cli shutdown</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h2 id=\"redis-启动与停止\"><a href=\"#redis-启动与停止\" class=\"headerlink\" title=\"redis 启动与停止\"></a>redis 启动与停止</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server redis.conf</div><div class=\"line\">redis-cli shutdown</div></pre></td></tr></table></figure>","more":""},{"title":"mysql SHOW PROCESSLIST","date":"2016-12-11T05:38:31.000Z","_content":"# SHOW PROCESSLIST\n\n**各列的含义和用途：**\n\n* ID列\n\n> 一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。\n\n* user列\n\n> 显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。\n\n* host列\n\n> 显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。\n\n* db列\n\n> 显示这个进程目前连接的是哪个数据库。\n\n* command列\n\n> 显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。\n\n* time列\n\n> 此这个状态持续的时间，单位是秒。\n\n* state列\n\n> 显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成\n\n* info列\n\n> 显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。\n<!-- more -->\n## QUERY\n```sql\nselect user,host,info from information_schema.processlist WHERE ....\n```\n","source":"_posts/sql.md","raw":"title: mysql SHOW PROCESSLIST\ndate: 2016-12-11 13:38:31\ntags:\n---\n# SHOW PROCESSLIST\n\n**各列的含义和用途：**\n\n* ID列\n\n> 一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。\n\n* user列\n\n> 显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。\n\n* host列\n\n> 显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。\n\n* db列\n\n> 显示这个进程目前连接的是哪个数据库。\n\n* command列\n\n> 显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。\n\n* time列\n\n> 此这个状态持续的时间，单位是秒。\n\n* state列\n\n> 显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成\n\n* info列\n\n> 显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。\n<!-- more -->\n## QUERY\n```sql\nselect user,host,info from information_schema.processlist WHERE ....\n```\n","slug":"sql","published":1,"updated":"2017-05-26T05:00:50.601Z","_id":"cj4p62jc1000f80vp9jod1v3p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SHOW-PROCESSLIST\"><a href=\"#SHOW-PROCESSLIST\" class=\"headerlink\" title=\"SHOW PROCESSLIST\"></a>SHOW PROCESSLIST</h1><p><strong>各列的含义和用途：</strong></p>\n<ul>\n<li>ID列</li>\n</ul>\n<blockquote>\n<p>一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。</p>\n</blockquote>\n<ul>\n<li>user列</li>\n</ul>\n<blockquote>\n<p>显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。</p>\n</blockquote>\n<ul>\n<li>host列</li>\n</ul>\n<blockquote>\n<p>显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。</p>\n</blockquote>\n<ul>\n<li>db列</li>\n</ul>\n<blockquote>\n<p>显示这个进程目前连接的是哪个数据库。</p>\n</blockquote>\n<ul>\n<li>command列</li>\n</ul>\n<blockquote>\n<p>显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。</p>\n</blockquote>\n<ul>\n<li>time列</li>\n</ul>\n<blockquote>\n<p>此这个状态持续的时间，单位是秒。</p>\n</blockquote>\n<ul>\n<li>state列</li>\n</ul>\n<blockquote>\n<p>显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成</p>\n</blockquote>\n<ul>\n<li>info列</li>\n</ul>\n<blockquote>\n<p>显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。<br><a id=\"more\"></a></p>\n<h2 id=\"QUERY\"><a href=\"#QUERY\" class=\"headerlink\" title=\"QUERY\"></a>QUERY</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>,host,info <span class=\"keyword\">from</span> information_schema.processlist <span class=\"keyword\">WHERE</span> ....</div></pre></td></tr></table></figure>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"SHOW-PROCESSLIST\"><a href=\"#SHOW-PROCESSLIST\" class=\"headerlink\" title=\"SHOW PROCESSLIST\"></a>SHOW PROCESSLIST</h1><p><strong>各列的含义和用途：</strong></p>\n<ul>\n<li>ID列</li>\n</ul>\n<blockquote>\n<p>一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。</p>\n</blockquote>\n<ul>\n<li>user列</li>\n</ul>\n<blockquote>\n<p>显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。</p>\n</blockquote>\n<ul>\n<li>host列</li>\n</ul>\n<blockquote>\n<p>显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。</p>\n</blockquote>\n<ul>\n<li>db列</li>\n</ul>\n<blockquote>\n<p>显示这个进程目前连接的是哪个数据库。</p>\n</blockquote>\n<ul>\n<li>command列</li>\n</ul>\n<blockquote>\n<p>显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。</p>\n</blockquote>\n<ul>\n<li>time列</li>\n</ul>\n<blockquote>\n<p>此这个状态持续的时间，单位是秒。</p>\n</blockquote>\n<ul>\n<li>state列</li>\n</ul>\n<blockquote>\n<p>显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成</p>\n</blockquote>\n<ul>\n<li>info列</li>\n</ul>\n<blockquote>\n<p>显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。<br>","more":"</p>\n<h2 id=\"QUERY\"><a href=\"#QUERY\" class=\"headerlink\" title=\"QUERY\"></a>QUERY</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>,host,info <span class=\"keyword\">from</span> information_schema.processlist <span class=\"keyword\">WHERE</span> ....</div></pre></td></tr></table></figure>\n</blockquote>"},{"title":"Windbg","date":"2017-02-08T05:04:19.000Z","_content":"## 命令(加载调试器)\n```\n命令：\n.loadby sos mscorwks  .Net 3.5版本及以下\n.loadby sos clr .Net 4.0\n.loadc:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\n说明：\n如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：.sympath=\n``` \n<!--more-->\n##  基本操作指令\n```\n!help    sos指令帮助\n!threads  显示所有线程\n!threadpool(!tp)   显示程序池信息\n~54s   查看54号线程\nkb   显示当前线程的callstack\n~*e !clrstack  看所有线程的堆栈信息\n!dumpheap  显示托管堆的信息\n!clrstack  显示调用栈\n!dumpstackobjects 打印当前thread的stack中保存的所有托管的object\n!dumpclass  打印出指定类型信息址上的类型定义\n!eeheap   列举出当前进程中managedheap的统计信息\n!dumpobj(!do)  显示一个对象的内容\n!dumparray 显示数组\n!syncblk   显示同步块\n!runaway  显示线程cpu时间\n!gcroot    跟踪对象内存引用\n!gchandles   打印出当前所有的GCHandle统计信息\n!objsize    打印出指定object\n!pe    打印异常\nvertarget  查看系统运行时间\n```\n \n## 内存泄露常用指令\n```\n !dumpheap–stat  检查当前所有托管类型的统计信息\n!dumpheap –mt 查看函数表地址中的各个对象信息\n!do   查看某个对象的具体信息\n!da   查看数组信息\n!gcroot  查看哪个root了某个对象\n \n使用例子：\n!dumpheap –mt 79124418  79124418是指某个函数表的地址。\n!do 0aca1000  查看0aca1000地址中的对象\n!gcroot 0aca1000  查看谁root 了0aca1000对象\n```\n## 线程Hang住常用指令\n```\n !threads   查看托管经程的统计信息\n !tp(threadpool)   查看一共设有多少个线程在运行\n !runawayf    查看各个线程的CPU使用情况   \n~*e!clrstack 查看各个线程都在做什么\n!synblk 查看AwareLock的Lock方法\n   \n 不常用指令：\n !ip2md 找到对应的module信息，后面参数为Callback中的EIP地址\n lmvm    查看DLL/EXE文件信息，参数为某个dll文件名称\n !savemodule   保存DLL到本场\n   \n 使用例子：\n !ip2md 0x09d30bao\n lmvmcommonobjects\n !savemodule 081f0000 d:\\xiongli\\commandobject.dll\n``` \n## 内存指令：\n```\n S    可以搜索内存\n r   显示寄存器的信息\n d    显示内存地址上的值\n e    命令修改内存地址上的值\n !address   命令显示某一地址上的页信息\n 使用例子：\n 1）使用d命令显示esp寄存器指向的内存，默认为byte\n   d  esp\n 2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式\n dd 054efc14\n 3）用ed命令把054efc14地址上的值修改成11112222\n ed 054efc14  11112222\n 4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD\n dd 054efc14  L4\n 5）在内存中搜索sina.com\n s –u  0012ff40 L?8000000 “sina.com”\n```\n## 其他常用指令：\n```\n lmf   列出当前进程中加载的所有DLL文件和对应的路径\n ~    显示线程信息和不同线程之间切换的值\n k    显示当前线程的callstack\n ~*k   结合~和k命令，来显示所有线程的callstack\n```\n \n \n## 生成DUMP包脚本\n``` \n\n \nSet objShell =CreateObject(\"Wscript.Shell\")\nDim InputPid\nInputPid = InputBox(\"请输入Pid\")\nobjCommand1 = \"\"\"D:\\ProgramFiles\\Debugging Tools for Windows (x86)\\adplus.vbs\"\"\" &\" -hang -o d:\\dump -quiet -p \" & InputPid\nobjShell.Run(objCommand1)\n \n保存成.vbs的文件\n点开运行后，输入对应的进程PID，即可抓下当前进程的包。\n```\n\n## 附录\n```\n.loadby sos mscorwks\t.Net 3.5版本及以下\n.loadby sos clr\t.Net 4.0\n.load c:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\t加载SOS文件\n.sympath=\t如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件\n!help\tsos指令帮助\nvertarget\t查看系统运行时间\n!threads\t显示所有线程\n!threadpool(!tp)\t显示程序池信息\n~54s  \t查看54号线程\nkb \t显示当前线程的callstack\n~*e !clrstack  \t看所有线程的堆栈信息\n!syncblk\t显示同步块\n!runaway\t显示线程cpu时间\n!pe\t打印异常\n!dumpheap\t显示托管堆的信息\n!dumpheap –stat\t检查当前所有托管类型的统计信息\n!dumpheap –mt \t查看函数表地址中的各个对象信息\t!dumpheap –mt 79124418   79124418是指某个函数表的地址。\n!clrstack\t显示调用栈\n!dumpstackobjects\t打印当前thread的stack中保存的所有托管的object\n!dumpclass\t打印出指定类型信息址上的类型定义\n!eeheap\t列举出当前进程中managed heap的统计信息\n!dumpobj(!do)\t显示一个对象的内容\t!do 0aca1000 查看0aca1000地址中的对象\n!dumparray(!da)\t显示数组\n!gcroot\t跟踪对象内存引用\t!gcroot 0aca1000   查看谁root 了0aca1000对象\n!gchandles\t打印出当前所有的GC Handle统计信息\n!objsize\t打印出指定object\n!ip2md\t找到对应的module信息，后面参数为Callback中的EIP地址\t!ip2md 0x09d30bao\nlmvm\t查看DLL/EXE文件信息，参数为某个dll文件名称\tlmvm commonobjects\n!savemodule\t保存DLL到本场\t!savemodule 081f0000 d:\\xiongli\\commandobject.dll\nS\t可以搜索内存\t在内存中搜索sina.com: s  –u  0012ff40 L?8000000 “sina.com”\nr\t显示寄存器的信息\nd\t显示内存地址上的值\t使用d命令显示esp寄存器指向的内存，默认为byte: d  esp\n用dd命令直接指定054efc14地址，第二个d表示用DWORD格式: dd  054efc14\ne\t命令修改内存地址上的值\t用ed命令把054efc14地址上的值修改成11112222: ed  054efc14  11112222\n!address\t命令显示某一地址上的页信息\nlmf\t列出当前进程中加载的所有DLL文件和对应的路径\n~\t显示线程信息和不同线程之间切换的值\nk\t显示当前线程的call stack\n~*k\t结合~和k命令，来显示所有线程的callstack\n```","source":"_posts/windbg.md","raw":"---\ntitle: Windbg  \ndate: 2017-02-08 13:04:19\ntags: Windbg\n---\n## 命令(加载调试器)\n```\n命令：\n.loadby sos mscorwks  .Net 3.5版本及以下\n.loadby sos clr .Net 4.0\n.loadc:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\n说明：\n如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：.sympath=\n``` \n<!--more-->\n##  基本操作指令\n```\n!help    sos指令帮助\n!threads  显示所有线程\n!threadpool(!tp)   显示程序池信息\n~54s   查看54号线程\nkb   显示当前线程的callstack\n~*e !clrstack  看所有线程的堆栈信息\n!dumpheap  显示托管堆的信息\n!clrstack  显示调用栈\n!dumpstackobjects 打印当前thread的stack中保存的所有托管的object\n!dumpclass  打印出指定类型信息址上的类型定义\n!eeheap   列举出当前进程中managedheap的统计信息\n!dumpobj(!do)  显示一个对象的内容\n!dumparray 显示数组\n!syncblk   显示同步块\n!runaway  显示线程cpu时间\n!gcroot    跟踪对象内存引用\n!gchandles   打印出当前所有的GCHandle统计信息\n!objsize    打印出指定object\n!pe    打印异常\nvertarget  查看系统运行时间\n```\n \n## 内存泄露常用指令\n```\n !dumpheap–stat  检查当前所有托管类型的统计信息\n!dumpheap –mt 查看函数表地址中的各个对象信息\n!do   查看某个对象的具体信息\n!da   查看数组信息\n!gcroot  查看哪个root了某个对象\n \n使用例子：\n!dumpheap –mt 79124418  79124418是指某个函数表的地址。\n!do 0aca1000  查看0aca1000地址中的对象\n!gcroot 0aca1000  查看谁root 了0aca1000对象\n```\n## 线程Hang住常用指令\n```\n !threads   查看托管经程的统计信息\n !tp(threadpool)   查看一共设有多少个线程在运行\n !runawayf    查看各个线程的CPU使用情况   \n~*e!clrstack 查看各个线程都在做什么\n!synblk 查看AwareLock的Lock方法\n   \n 不常用指令：\n !ip2md 找到对应的module信息，后面参数为Callback中的EIP地址\n lmvm    查看DLL/EXE文件信息，参数为某个dll文件名称\n !savemodule   保存DLL到本场\n   \n 使用例子：\n !ip2md 0x09d30bao\n lmvmcommonobjects\n !savemodule 081f0000 d:\\xiongli\\commandobject.dll\n``` \n## 内存指令：\n```\n S    可以搜索内存\n r   显示寄存器的信息\n d    显示内存地址上的值\n e    命令修改内存地址上的值\n !address   命令显示某一地址上的页信息\n 使用例子：\n 1）使用d命令显示esp寄存器指向的内存，默认为byte\n   d  esp\n 2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式\n dd 054efc14\n 3）用ed命令把054efc14地址上的值修改成11112222\n ed 054efc14  11112222\n 4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD\n dd 054efc14  L4\n 5）在内存中搜索sina.com\n s –u  0012ff40 L?8000000 “sina.com”\n```\n## 其他常用指令：\n```\n lmf   列出当前进程中加载的所有DLL文件和对应的路径\n ~    显示线程信息和不同线程之间切换的值\n k    显示当前线程的callstack\n ~*k   结合~和k命令，来显示所有线程的callstack\n```\n \n \n## 生成DUMP包脚本\n``` \n\n \nSet objShell =CreateObject(\"Wscript.Shell\")\nDim InputPid\nInputPid = InputBox(\"请输入Pid\")\nobjCommand1 = \"\"\"D:\\ProgramFiles\\Debugging Tools for Windows (x86)\\adplus.vbs\"\"\" &\" -hang -o d:\\dump -quiet -p \" & InputPid\nobjShell.Run(objCommand1)\n \n保存成.vbs的文件\n点开运行后，输入对应的进程PID，即可抓下当前进程的包。\n```\n\n## 附录\n```\n.loadby sos mscorwks\t.Net 3.5版本及以下\n.loadby sos clr\t.Net 4.0\n.load c:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\t加载SOS文件\n.sympath=\t如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件\n!help\tsos指令帮助\nvertarget\t查看系统运行时间\n!threads\t显示所有线程\n!threadpool(!tp)\t显示程序池信息\n~54s  \t查看54号线程\nkb \t显示当前线程的callstack\n~*e !clrstack  \t看所有线程的堆栈信息\n!syncblk\t显示同步块\n!runaway\t显示线程cpu时间\n!pe\t打印异常\n!dumpheap\t显示托管堆的信息\n!dumpheap –stat\t检查当前所有托管类型的统计信息\n!dumpheap –mt \t查看函数表地址中的各个对象信息\t!dumpheap –mt 79124418   79124418是指某个函数表的地址。\n!clrstack\t显示调用栈\n!dumpstackobjects\t打印当前thread的stack中保存的所有托管的object\n!dumpclass\t打印出指定类型信息址上的类型定义\n!eeheap\t列举出当前进程中managed heap的统计信息\n!dumpobj(!do)\t显示一个对象的内容\t!do 0aca1000 查看0aca1000地址中的对象\n!dumparray(!da)\t显示数组\n!gcroot\t跟踪对象内存引用\t!gcroot 0aca1000   查看谁root 了0aca1000对象\n!gchandles\t打印出当前所有的GC Handle统计信息\n!objsize\t打印出指定object\n!ip2md\t找到对应的module信息，后面参数为Callback中的EIP地址\t!ip2md 0x09d30bao\nlmvm\t查看DLL/EXE文件信息，参数为某个dll文件名称\tlmvm commonobjects\n!savemodule\t保存DLL到本场\t!savemodule 081f0000 d:\\xiongli\\commandobject.dll\nS\t可以搜索内存\t在内存中搜索sina.com: s  –u  0012ff40 L?8000000 “sina.com”\nr\t显示寄存器的信息\nd\t显示内存地址上的值\t使用d命令显示esp寄存器指向的内存，默认为byte: d  esp\n用dd命令直接指定054efc14地址，第二个d表示用DWORD格式: dd  054efc14\ne\t命令修改内存地址上的值\t用ed命令把054efc14地址上的值修改成11112222: ed  054efc14  11112222\n!address\t命令显示某一地址上的页信息\nlmf\t列出当前进程中加载的所有DLL文件和对应的路径\n~\t显示线程信息和不同线程之间切换的值\nk\t显示当前线程的call stack\n~*k\t结合~和k命令，来显示所有线程的callstack\n```","slug":"windbg","published":1,"updated":"2017-05-26T05:15:44.589Z","_id":"cj4p62jcc000g80vpduply09z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"命令-加载调试器\"><a href=\"#命令-加载调试器\" class=\"headerlink\" title=\"命令(加载调试器)\"></a>命令(加载调试器)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令：</div><div class=\"line\">.loadby sos mscorwks  .Net 3.5版本及以下</div><div class=\"line\">.loadby sos clr .Net 4.0</div><div class=\"line\">.loadc:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll</div><div class=\"line\">说明：</div><div class=\"line\">如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：.sympath=</div><div class=\"line\">``` </div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">##  基本操作指令</div></pre></td></tr></table></figure>\n<p>!help    sos指令帮助<br>!threads  显示所有线程<br>!threadpool(!tp)   显示程序池信息<br>~54s   查看54号线程<br>kb   显示当前线程的callstack<br>~*e !clrstack  看所有线程的堆栈信息<br>!dumpheap  显示托管堆的信息<br>!clrstack  显示调用栈<br>!dumpstackobjects 打印当前thread的stack中保存的所有托管的object<br>!dumpclass  打印出指定类型信息址上的类型定义<br>!eeheap   列举出当前进程中managedheap的统计信息<br>!dumpobj(!do)  显示一个对象的内容<br>!dumparray 显示数组<br>!syncblk   显示同步块<br>!runaway  显示线程cpu时间<br>!gcroot    跟踪对象内存引用<br>!gchandles   打印出当前所有的GCHandle统计信息<br>!objsize    打印出指定object<br>!pe    打印异常<br>vertarget  查看系统运行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">## 内存泄露常用指令</div></pre></td></tr></table></figure></p>\n<p> !dumpheap–stat  检查当前所有托管类型的统计信息<br>!dumpheap –mt 查看函数表地址中的各个对象信息<br>!do   查看某个对象的具体信息<br>!da   查看数组信息<br>!gcroot  查看哪个root了某个对象</p>\n<p>使用例子：<br>!dumpheap –mt 79124418  79124418是指某个函数表的地址。<br>!do 0aca1000  查看0aca1000地址中的对象<br>!gcroot 0aca1000  查看谁root 了0aca1000对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 线程Hang住常用指令</div></pre></td></tr></table></figure></p>\n<p> !threads   查看托管经程的统计信息<br> !tp(threadpool)   查看一共设有多少个线程在运行<br> !runawayf    查看各个线程的CPU使用情况<br>~*e!clrstack 查看各个线程都在做什么<br>!synblk 查看AwareLock的Lock方法</p>\n<p> 不常用指令：<br> !ip2md 找到对应的module信息，后面参数为Callback中的EIP地址<br> lmvm    查看DLL/EXE文件信息，参数为某个dll文件名称<br> !savemodule   保存DLL到本场</p>\n<p> 使用例子：<br> !ip2md 0x09d30bao<br> lmvmcommonobjects<br> !savemodule 081f0000 d:\\xiongli\\commandobject.dll<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 内存指令：</div></pre></td></tr></table></figure></p>\n<p> S    可以搜索内存<br> r   显示寄存器的信息<br> d    显示内存地址上的值<br> e    命令修改内存地址上的值<br> !address   命令显示某一地址上的页信息<br> 使用例子：<br> 1）使用d命令显示esp寄存器指向的内存，默认为byte<br>   d  esp<br> 2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式<br> dd 054efc14<br> 3）用ed命令把054efc14地址上的值修改成11112222<br> ed 054efc14  11112222<br> 4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD<br> dd 054efc14  L4<br> 5）在内存中搜索sina.com<br> s –u  0012ff40 L?8000000 “sina.com”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 其他常用指令：</div></pre></td></tr></table></figure></p>\n<p> lmf   列出当前进程中加载的所有DLL文件和对应的路径<br> ~    显示线程信息和不同线程之间切换的值<br> k    显示当前线程的callstack<br> ~*k   结合~和k命令，来显示所有线程的callstack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">## 生成DUMP包脚本</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">Set objShell =CreateObject(&quot;Wscript.Shell&quot;)</div><div class=\"line\">Dim InputPid</div><div class=\"line\">InputPid = InputBox(&quot;请输入Pid&quot;)</div><div class=\"line\">objCommand1 = &quot;&quot;&quot;D:\\ProgramFiles\\Debugging Tools for Windows (x86)\\adplus.vbs&quot;&quot;&quot; &amp;&quot; -hang -o d:\\dump -quiet -p &quot; &amp; InputPid</div><div class=\"line\">objShell.Run(objCommand1)</div><div class=\"line\"> </div><div class=\"line\">保存成.vbs的文件</div><div class=\"line\">点开运行后，输入对应的进程PID，即可抓下当前进程的包。</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">.loadby sos mscorwks\t.Net 3.5版本及以下</div><div class=\"line\">.loadby sos clr\t.Net 4.0</div><div class=\"line\">.load c:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\t加载SOS文件</div><div class=\"line\">.sympath=\t如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件</div><div class=\"line\">!help\tsos指令帮助</div><div class=\"line\">vertarget\t查看系统运行时间</div><div class=\"line\">!threads\t显示所有线程</div><div class=\"line\">!threadpool(!tp)\t显示程序池信息</div><div class=\"line\">~54s  \t查看54号线程</div><div class=\"line\">kb \t显示当前线程的callstack</div><div class=\"line\">~*e !clrstack  \t看所有线程的堆栈信息</div><div class=\"line\">!syncblk\t显示同步块</div><div class=\"line\">!runaway\t显示线程cpu时间</div><div class=\"line\">!pe\t打印异常</div><div class=\"line\">!dumpheap\t显示托管堆的信息</div><div class=\"line\">!dumpheap –stat\t检查当前所有托管类型的统计信息</div><div class=\"line\">!dumpheap –mt \t查看函数表地址中的各个对象信息\t!dumpheap –mt 79124418   79124418是指某个函数表的地址。</div><div class=\"line\">!clrstack\t显示调用栈</div><div class=\"line\">!dumpstackobjects\t打印当前thread的stack中保存的所有托管的object</div><div class=\"line\">!dumpclass\t打印出指定类型信息址上的类型定义</div><div class=\"line\">!eeheap\t列举出当前进程中managed heap的统计信息</div><div class=\"line\">!dumpobj(!do)\t显示一个对象的内容\t!do 0aca1000 查看0aca1000地址中的对象</div><div class=\"line\">!dumparray(!da)\t显示数组</div><div class=\"line\">!gcroot\t跟踪对象内存引用\t!gcroot 0aca1000   查看谁root 了0aca1000对象</div><div class=\"line\">!gchandles\t打印出当前所有的GC Handle统计信息</div><div class=\"line\">!objsize\t打印出指定object</div><div class=\"line\">!ip2md\t找到对应的module信息，后面参数为Callback中的EIP地址\t!ip2md 0x09d30bao</div><div class=\"line\">lmvm\t查看DLL/EXE文件信息，参数为某个dll文件名称\tlmvm commonobjects</div><div class=\"line\">!savemodule\t保存DLL到本场\t!savemodule 081f0000 d:\\xiongli\\commandobject.dll</div><div class=\"line\">S\t可以搜索内存\t在内存中搜索sina.com: s  –u  0012ff40 L?8000000 “sina.com”</div><div class=\"line\">r\t显示寄存器的信息</div><div class=\"line\">d\t显示内存地址上的值\t使用d命令显示esp寄存器指向的内存，默认为byte: d  esp</div><div class=\"line\">用dd命令直接指定054efc14地址，第二个d表示用DWORD格式: dd  054efc14</div><div class=\"line\">e\t命令修改内存地址上的值\t用ed命令把054efc14地址上的值修改成11112222: ed  054efc14  11112222</div><div class=\"line\">!address\t命令显示某一地址上的页信息</div><div class=\"line\">lmf\t列出当前进程中加载的所有DLL文件和对应的路径</div><div class=\"line\">~\t显示线程信息和不同线程之间切换的值</div><div class=\"line\">k\t显示当前线程的call stack</div><div class=\"line\">~*k\t结合~和k命令，来显示所有线程的callstack</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令-加载调试器\"><a href=\"#命令-加载调试器\" class=\"headerlink\" title=\"命令(加载调试器)\"></a>命令(加载调试器)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令：</div><div class=\"line\">.loadby sos mscorwks  .Net 3.5版本及以下</div><div class=\"line\">.loadby sos clr .Net 4.0</div><div class=\"line\">.loadc:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll</div><div class=\"line\">说明：</div><div class=\"line\">如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：.sympath=</div><div class=\"line\">``` </div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">##  基本操作指令</div></pre></td></tr></table></figure>\n<p>!help    sos指令帮助<br>!threads  显示所有线程<br>!threadpool(!tp)   显示程序池信息<br>~54s   查看54号线程<br>kb   显示当前线程的callstack<br>~*e !clrstack  看所有线程的堆栈信息<br>!dumpheap  显示托管堆的信息<br>!clrstack  显示调用栈<br>!dumpstackobjects 打印当前thread的stack中保存的所有托管的object<br>!dumpclass  打印出指定类型信息址上的类型定义<br>!eeheap   列举出当前进程中managedheap的统计信息<br>!dumpobj(!do)  显示一个对象的内容<br>!dumparray 显示数组<br>!syncblk   显示同步块<br>!runaway  显示线程cpu时间<br>!gcroot    跟踪对象内存引用<br>!gchandles   打印出当前所有的GCHandle统计信息<br>!objsize    打印出指定object<br>!pe    打印异常<br>vertarget  查看系统运行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">## 内存泄露常用指令</div></pre></td></tr></table></figure></p>\n<p> !dumpheap–stat  检查当前所有托管类型的统计信息<br>!dumpheap –mt 查看函数表地址中的各个对象信息<br>!do   查看某个对象的具体信息<br>!da   查看数组信息<br>!gcroot  查看哪个root了某个对象</p>\n<p>使用例子：<br>!dumpheap –mt 79124418  79124418是指某个函数表的地址。<br>!do 0aca1000  查看0aca1000地址中的对象<br>!gcroot 0aca1000  查看谁root 了0aca1000对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 线程Hang住常用指令</div></pre></td></tr></table></figure></p>\n<p> !threads   查看托管经程的统计信息<br> !tp(threadpool)   查看一共设有多少个线程在运行<br> !runawayf    查看各个线程的CPU使用情况<br>~*e!clrstack 查看各个线程都在做什么<br>!synblk 查看AwareLock的Lock方法</p>\n<p> 不常用指令：<br> !ip2md 找到对应的module信息，后面参数为Callback中的EIP地址<br> lmvm    查看DLL/EXE文件信息，参数为某个dll文件名称<br> !savemodule   保存DLL到本场</p>\n<p> 使用例子：<br> !ip2md 0x09d30bao<br> lmvmcommonobjects<br> !savemodule 081f0000 d:\\xiongli\\commandobject.dll<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 内存指令：</div></pre></td></tr></table></figure></p>\n<p> S    可以搜索内存<br> r   显示寄存器的信息<br> d    显示内存地址上的值<br> e    命令修改内存地址上的值<br> !address   命令显示某一地址上的页信息<br> 使用例子：<br> 1）使用d命令显示esp寄存器指向的内存，默认为byte<br>   d  esp<br> 2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式<br> dd 054efc14<br> 3）用ed命令把054efc14地址上的值修改成11112222<br> ed 054efc14  11112222<br> 4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD<br> dd 054efc14  L4<br> 5）在内存中搜索sina.com<br> s –u  0012ff40 L?8000000 “sina.com”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 其他常用指令：</div></pre></td></tr></table></figure></p>\n<p> lmf   列出当前进程中加载的所有DLL文件和对应的路径<br> ~    显示线程信息和不同线程之间切换的值<br> k    显示当前线程的callstack<br> ~*k   结合~和k命令，来显示所有线程的callstack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">## 生成DUMP包脚本</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">Set objShell =CreateObject(&quot;Wscript.Shell&quot;)</div><div class=\"line\">Dim InputPid</div><div class=\"line\">InputPid = InputBox(&quot;请输入Pid&quot;)</div><div class=\"line\">objCommand1 = &quot;&quot;&quot;D:\\ProgramFiles\\Debugging Tools for Windows (x86)\\adplus.vbs&quot;&quot;&quot; &amp;&quot; -hang -o d:\\dump -quiet -p &quot; &amp; InputPid</div><div class=\"line\">objShell.Run(objCommand1)</div><div class=\"line\"> </div><div class=\"line\">保存成.vbs的文件</div><div class=\"line\">点开运行后，输入对应的进程PID，即可抓下当前进程的包。</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">.loadby sos mscorwks\t.Net 3.5版本及以下</div><div class=\"line\">.loadby sos clr\t.Net 4.0</div><div class=\"line\">.load c:\\windows\\microsoft.net\\framework\\v2.0.50727\\sos.dll\t加载SOS文件</div><div class=\"line\">.sympath=\t如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件</div><div class=\"line\">!help\tsos指令帮助</div><div class=\"line\">vertarget\t查看系统运行时间</div><div class=\"line\">!threads\t显示所有线程</div><div class=\"line\">!threadpool(!tp)\t显示程序池信息</div><div class=\"line\">~54s  \t查看54号线程</div><div class=\"line\">kb \t显示当前线程的callstack</div><div class=\"line\">~*e !clrstack  \t看所有线程的堆栈信息</div><div class=\"line\">!syncblk\t显示同步块</div><div class=\"line\">!runaway\t显示线程cpu时间</div><div class=\"line\">!pe\t打印异常</div><div class=\"line\">!dumpheap\t显示托管堆的信息</div><div class=\"line\">!dumpheap –stat\t检查当前所有托管类型的统计信息</div><div class=\"line\">!dumpheap –mt \t查看函数表地址中的各个对象信息\t!dumpheap –mt 79124418   79124418是指某个函数表的地址。</div><div class=\"line\">!clrstack\t显示调用栈</div><div class=\"line\">!dumpstackobjects\t打印当前thread的stack中保存的所有托管的object</div><div class=\"line\">!dumpclass\t打印出指定类型信息址上的类型定义</div><div class=\"line\">!eeheap\t列举出当前进程中managed heap的统计信息</div><div class=\"line\">!dumpobj(!do)\t显示一个对象的内容\t!do 0aca1000 查看0aca1000地址中的对象</div><div class=\"line\">!dumparray(!da)\t显示数组</div><div class=\"line\">!gcroot\t跟踪对象内存引用\t!gcroot 0aca1000   查看谁root 了0aca1000对象</div><div class=\"line\">!gchandles\t打印出当前所有的GC Handle统计信息</div><div class=\"line\">!objsize\t打印出指定object</div><div class=\"line\">!ip2md\t找到对应的module信息，后面参数为Callback中的EIP地址\t!ip2md 0x09d30bao</div><div class=\"line\">lmvm\t查看DLL/EXE文件信息，参数为某个dll文件名称\tlmvm commonobjects</div><div class=\"line\">!savemodule\t保存DLL到本场\t!savemodule 081f0000 d:\\xiongli\\commandobject.dll</div><div class=\"line\">S\t可以搜索内存\t在内存中搜索sina.com: s  –u  0012ff40 L?8000000 “sina.com”</div><div class=\"line\">r\t显示寄存器的信息</div><div class=\"line\">d\t显示内存地址上的值\t使用d命令显示esp寄存器指向的内存，默认为byte: d  esp</div><div class=\"line\">用dd命令直接指定054efc14地址，第二个d表示用DWORD格式: dd  054efc14</div><div class=\"line\">e\t命令修改内存地址上的值\t用ed命令把054efc14地址上的值修改成11112222: ed  054efc14  11112222</div><div class=\"line\">!address\t命令显示某一地址上的页信息</div><div class=\"line\">lmf\t列出当前进程中加载的所有DLL文件和对应的路径</div><div class=\"line\">~\t显示线程信息和不同线程之间切换的值</div><div class=\"line\">k\t显示当前线程的call stack</div><div class=\"line\">~*k\t结合~和k命令，来显示所有线程的callstack</div></pre></td></tr></table></figure>"},{"title":"springmvc常用注解标签","date":"2016-12-19T04:45:57.000Z","_content":"# springmvc常用注解标签详解\n## @Controller\n在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。\n@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：\n1. 在SpringMVC 的配置文件中定义MyController 的bean 对象。\n2. 在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。\n```xml\n<!--方式一-->\n<bean class=\"com.host.app.web.controller.MyController\"/>\n<!--方式二-->\n< context:component-scan base-package = \"com.host.app.web\" />//路径写到controller的上一层(扫描包详解见下面浅析)\n```\n<!--more-->\n## @RequestMapping\nRequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。\nRequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）\n### value， method；\n1. value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）\n2. method:指定请求的method类型， GET、POST、PUT、DELETE等；\n### consumes，produces\nconsumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;\nproduces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；\n### params，headers\n1. params： 指定request中必须包含某些参数值是，才让该方法处理。\n2. headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。\n## @Resource和@Autowired\n@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入\n在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法\n\n### 共同点\n两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。\n### 不同点\n**@Autowired** \n\n@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n```java\npublic class TestServiceImpl {\n    // 下面两种@Autowired只要使用一种即可\n    @Autowired\n    private UserDao userDao; // 用于字段上\n    \n    @Autowired\n    public void setUserDao(UserDao userDao) { // 用于属性的方法上\n        this.userDao = userDao;\n    }\n}\n```\n@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：\n```java\npublic class TestServiceImpl {\n    @Autowired\n    @Qualifier(\"userDao\")\n    private UserDao userDao; \n}\n```\n**@Resource**\n\n@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n```java\npublic class TestServiceImpl {\n    // 下面两种@Resource只要使用一种即可\n    @Resource(name=\"userDao\")\n    private UserDao userDao; // 用于字段上\n    \n    @Resource(name=\"userDao\")\n    public void setUserDao(UserDao userDao) { // 用于属性的setter方法上\n        this.userDao = userDao;\n    }\n}\n```\n注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。\n\n@Resource装配顺序：\n```\n1.如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。\n\n2.如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。\n\n3.如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。\n\n4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。\n```\n@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。\n\n## @ModelAttribute和 @SessionAttributes\n代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。\n\n@SessionAttributes即将值放到session作用域中，写在class上面。\n\n具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\n\n## @PathVariable\n用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：\n```java\n@Controller  \npublic class TestController {  \n     @RequestMapping(value=\"/user/{userId}/roles/{roleId}\",method = RequestMethod.GET)  \n     public String getLogin(@PathVariable(\"userId\") String userId,  \n         @PathVariable(\"roleId\") String roleId){  \n         System.out.println(\"User Id : \" + userId);  \n         System.out.println(\"Role Id : \" + roleId);  \n         return \"hello\";  \n     }  \n     @RequestMapping(value=\"/product/{productId}\",method = RequestMethod.GET)  \n     public String getProduct(@PathVariable(\"productId\") String productId){  \n           System.out.println(\"Product Id : \" + productId);  \n           return \"hello\";  \n     }  \n     @RequestMapping(value=\"/javabeat/{regexp1:[a-z-]+}\",  \n           method = RequestMethod.GET)  \n     public String getRegExp(@PathVariable(\"regexp1\") String regexp1){  \n           System.out.println(\"URI Part 1 : \" + regexp1);  \n           return \"hello\";  \n     }  \n}\n```\n## @requestParam\n@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(\"name\")，它有三个常用参数：defaultValue = \"0\", required = false, value = \"isApp\"；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。\n\n## @ResponseBody\n作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。\n\n使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；\n\n## @Component\n相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。\n\n## @Repository\n用于注解dao层，在daoImpl类上面注解。\n\n \n\n# 注：\n## 使用 @RequestMapping 来映射 Request 请求与处理器\n\n方式一、通过常见的类路径和方法路径结合访问controller方法\n\n方式二、使用uri模板\n\n```java\n@Controller\n@RequestMapping ( \"/test/{variable1}\" )\npublic class MyController {\n\n    @RequestMapping ( \"/showView/{variable2}\" )\n    public ModelAndView showView( @PathVariable String variable1, @PathVariable ( \"variable2\" ) int variable2) {\n       ModelAndView modelAndView = new ModelAndView();\n       modelAndView.setViewName( \"viewName\" );\n       modelAndView.addObject( \" 需要放到 model 中的属性名称 \" , \" 对应的属性值，它是一个对象 \" );\n       return modelAndView;\n    }\n} \n```\n**URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值**\n如URI 模板http://localhost/app/{variable1}/index.html ，这个模板里面包含一个变量variable1 ，那么当我们请求http://localhost/app/hello/index.html 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。\n代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。\n在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。\n除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：\n\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\npublic class MyController {\n    @RequestMapping ( \"*/wildcard\" )\n    public String testWildcard() {\n       System. out .println( \"wildcard------------\" );\n       return \"wildcard\" ;\n    }  \n}\n```\n当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。\n\n## 使用 @RequestMapping 的一些高级用法\n\n### params属性\n```java\n@RequestMapping (value= \"testParams\" , params={ \"param1=value1\" , \"param2\" , \"!param3\" })\n    public String testParams() {\n       System. out .println( \"test Params...........\" );\n       return \"testParams\" ;\n    }\n```\n用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&param2=value2&param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。\n\n### method属性\n```java\n@RequestMapping (value= \"testMethod\" , method={RequestMethod. GET , RequestMethod. DELETE })\n    public String testMethod() {\n       return \"method\" ;\n    }\n```\n在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。\n\n### headers属性\n```java\n@RequestMapping (value= \"testHeaders\" , headers={ \"host=localhost\" , \"Accept\" })\n    public String testHeaders() {\n       return \"headers\" ;\n    }\n```\nheaders 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。\n\n## @RequestMapping 标记的处理器方法支持的方法参数和返回类型\n\n### 支持的方法参数类型\n\n   1. HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。\n   2. Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。\n   3. InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。\n   4. 使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。\n   5. 使用@ModelAttribute 标记的参数。\n   6. java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。\n   7. 实体类。 可以用来接收上传的参数。\n   8. Spring 封装的MultipartFile 。 用来接收上传文件的。\n   9. Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。\n\n### 支持的返回类型\n\n   1. 一个包含模型和视图的ModelAndView 对象。\n   2. 一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。\n   3. 一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。\n   4. 一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。\n   5. 返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。\n   6. 如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。\n   7. 除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。\n\n## 使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\n\nSpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。\n\n当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。\n\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\npublic class MyController {\n\n    @ModelAttribute ( \"hello\" )\n    public String getModel() {\n       System. out .println( \"-------------Hello---------\" );\n       return \"world\" ;\n    }\n\n    @ModelAttribute ( \"intValue\" )\n    public int getInteger() {\n       System. out .println( \"-------------intValue---------------\" );\n       return 10;\n    }\n\n    @RequestMapping ( \"sayHello\" )\n    public void sayHello( @ModelAttribute ( \"hello\" ) String hello, @ModelAttribute ( \"intValue\" ) int num, @ModelAttribute ( \"user2\" ) User user, Writer writer, HttpSession session) throws IOException {\n       writer.write( \"Hello \" + hello + \" , Hello \" + user.getUsername() + num);\n       writer.write( \"\\r\" );\n       Enumeration enume = session.getAttributeNames();\n       while (enume.hasMoreElements())\n           writer.write(enume.nextElement() + \"\\r\" );\n    }\n\n    @ModelAttribute ( \"user2\" )\n    public User getUser(){\n       System. out .println( \"---------getUser-------------\" );\n       return new User(3, \"user2\" );\n    }\n}\n```\n\n当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：\n```\n Hello world,Hello user210\n```\n由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\n@SessionAttributes (value={ \"intValue\" , \"stringValue\" }, types={User. class })\npublic class MyController {\n\n    @ModelAttribute ( \"hello\" )\n    public String getModel() {\n       System. out .println( \"-------------Hello---------\" );\n       return \"world\" ;\n    }\n\n    @ModelAttribute ( \"intValue\" )\n    public int getInteger() {\n       System. out .println( \"-------------intValue---------------\" );\n       return 10;\n    }\n   \n    @RequestMapping ( \"sayHello\" )\n    public void sayHello(Map<String, Object> map, @ModelAttribute ( \"hello\" ) String hello, @ModelAttribute ( \"intValue\" ) int num, @ModelAttribute ( \"user2\" ) User user, Writer writer, HttpServletRequest request) throws IOException {\n       map.put( \"stringValue\" , \"String\" );\n       writer.write( \"Hello \" + hello + \" , Hello \" + user.getUsername() + num);\n       writer.write( \"\\r\" );\n       HttpSession session = request.getSession();\n       Enumeration enume = session.getAttributeNames();\n       while (enume.hasMoreElements())\n           writer.write(enume.nextElement() + \"\\r\" );\n       System. out .println(session);\n    }\n\n    @ModelAttribute ( \"user2\" )\n    public User getUser() {\n       System. out .println( \"---------getUser-------------\" );\n       return new User(3, \"user2\" );\n    }\n}\n```\n在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：\n```\n Hello world,Hello user210\n```\n仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：\n```\nHello world,Hello user210\n\nuser2\n\nintValue\n\nstringValue\n```\n\n当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。\n\n## @PathVariable和@RequestParam的区别 \n\n请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = \"/page/{id}\", method = RequestMethod.GET)  \n@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。\n\n简介：\n```\nhandler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）\n\nA、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;\n\nB、处理request header部分的注解：   @RequestHeader, @CookieValue;\n\nC、处理request body部分的注解：@RequestParam,  @RequestBody;\n\nD、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;\n```\n### @PathVariable\n\n当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/owners/{ownerId}\")  \npublic class RelativePathUriTemplateController {  \n  \n  @RequestMapping(\"/pets/{petId}\")  \n  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {      \n    // implementation omitted   \n  }  \n} \n```\n上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(\"name\")指定uri template中的名称。\n\n### @RequestHeader、@CookieValue\n\n@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。\n\n示例代码：\n\n这是一个Request 的header部分：\n\nHost                    localhost:8080  \nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9  \nAccept-Language         fr,en-gb;q=0.7,en;q=0.3  \nAccept-Encoding         gzip,deflate  \nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  \nKeep-Alive              300  \n```java\n@RequestMapping(\"/displayHeaderInfo.do\")  \npublic void displayHeaderInfo(@RequestHeader(\"Accept-Encoding\") String encoding,  \n                              @RequestHeader(\"Keep-Alive\") long keepAlive)  {  \n}\n```  \n上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。\n\n## @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。\n\n例如有如下Cookie值：\n```java\n　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84\n\n@RequestMapping(\"/displayHeaderInfo.do\")  \npublic void displayHeaderInfo(@CookieValue(\"JSESSIONID\") String cookie)  {  \n} \n```\n即把JSESSIONID的值绑定到参数cookie上。\n\n## @RequestParam, @RequestBody\n\n### RequestParam \n\nA） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n\nB）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n\nC) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/pets\")  \n@SessionAttributes(\"pet\")  \npublic class EditPetForm {  \n    @RequestMapping(method = RequestMethod.GET)  \n public String setupForm(@RequestParam(\"petId\") int petId, ModelMap model) {  \n       Pet pet = this.clinic.loadPet(petId);  \n   model.addAttribute(\"pet\", pet);  \n   return \"petForm\";  \n   }\n}\n```\n### RequestBody\n\n该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；\n\n它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。\n\n因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<String, String>里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;\n\n示例代码：\n```java\n@RequestMapping(value = \"/something\", method = RequestMethod.PUT)  \npublic void handle(@RequestBody String body, Writer writer) throws IOException {  \n  writer.write(body);  \n} \n```\n## @SessionAttributes, @ModelAttribute\n\n### @SessionAttributes:\n\n该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。\n\n该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/editPet.do\")  \n@SessionAttributes(\"pet\")  \npublic class EditPetForm {  \n    // ...   \n} \n```\n### @ModelAttribute\n\n该注解有两个用法，一个是用于方法上，一个是用于参数上；\n\n用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；\n\n用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：\n\nA） @SessionAttributes 启用的attribute 对象上；\n\nB） @ModelAttribute 用于方法上时指定的model对象；\n\nC） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。\n用到方法上@ModelAttribute的示例代码：\n```java\n@ModelAttribute  \npublic Account addAccount(@RequestParam String number) {  \n    return accountManager.findAccount(number);  \n} \n```\n这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。\n\n用在参数上的@ModelAttribute示例代码：\n```java\n@RequestMapping(value=\"/owners/{ownerId}/pets/{petId}/edit\", method = RequestMethod.POST)  \npublic String processSubmit(@ModelAttribute Pet pet) {  \n     \n} \n```\n首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。\n## <context:component-scan base-package = \"\" />\ncomponent-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐\n有了<context:component-scan>，另一个<context:annotation-config/>标签根本可以移除掉，因为已经被包含进去了\n另外<context:annotation-config/>还提供了两个子标签\n```\n1. <context:include-filter> //指定扫描的路径\n2. <context:exclude-filter> //排除扫描的路径\n```\n```xml\n<context:component-scan>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。\n```\n这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：\n```xml\n<context:component-scan base-package=\"com.tan\" use-default-filters=\"false\">\n        <context:include-filter type=\"regex\" expression=\"com.tan.*\"/>//注意后面要写.*\n</context:component-scan>\n```\n当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径\n```xml\n<context:component-scan base-package=\"com.tan\" >\n        <context:include-filter type=\"regex\" expression=\".controller.*\"/>\n        <context:include-filter type=\"regex\" expression=\".service.*\"/>\n        <context:include-filter type=\"regex\" expression=\".dao.*\"/>\n</context:component-scan>\n```\n\n效果相当于：\n```xml\n<context:component-scan base-package=\"com.tan\" >\n        <context:exclude-filter type=\"regex\" expression=\".model.*\"/>\n</context:component-scan>\n```\n\n注意：本人尝试时无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在\n","source":"_posts/spring.md","raw":"---\ntitle: 'springmvc常用注解标签'\ndate: 2016-12-19 12:45:57\ntags: spring\n---\n# springmvc常用注解标签详解\n## @Controller\n在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。\n@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：\n1. 在SpringMVC 的配置文件中定义MyController 的bean 对象。\n2. 在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。\n```xml\n<!--方式一-->\n<bean class=\"com.host.app.web.controller.MyController\"/>\n<!--方式二-->\n< context:component-scan base-package = \"com.host.app.web\" />//路径写到controller的上一层(扫描包详解见下面浅析)\n```\n<!--more-->\n## @RequestMapping\nRequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。\nRequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）\n### value， method；\n1. value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）\n2. method:指定请求的method类型， GET、POST、PUT、DELETE等；\n### consumes，produces\nconsumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;\nproduces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；\n### params，headers\n1. params： 指定request中必须包含某些参数值是，才让该方法处理。\n2. headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。\n## @Resource和@Autowired\n@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入\n在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法\n\n### 共同点\n两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。\n### 不同点\n**@Autowired** \n\n@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n```java\npublic class TestServiceImpl {\n    // 下面两种@Autowired只要使用一种即可\n    @Autowired\n    private UserDao userDao; // 用于字段上\n    \n    @Autowired\n    public void setUserDao(UserDao userDao) { // 用于属性的方法上\n        this.userDao = userDao;\n    }\n}\n```\n@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：\n```java\npublic class TestServiceImpl {\n    @Autowired\n    @Qualifier(\"userDao\")\n    private UserDao userDao; \n}\n```\n**@Resource**\n\n@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n```java\npublic class TestServiceImpl {\n    // 下面两种@Resource只要使用一种即可\n    @Resource(name=\"userDao\")\n    private UserDao userDao; // 用于字段上\n    \n    @Resource(name=\"userDao\")\n    public void setUserDao(UserDao userDao) { // 用于属性的setter方法上\n        this.userDao = userDao;\n    }\n}\n```\n注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。\n\n@Resource装配顺序：\n```\n1.如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。\n\n2.如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。\n\n3.如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。\n\n4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。\n```\n@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。\n\n## @ModelAttribute和 @SessionAttributes\n代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。\n\n@SessionAttributes即将值放到session作用域中，写在class上面。\n\n具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\n\n## @PathVariable\n用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：\n```java\n@Controller  \npublic class TestController {  \n     @RequestMapping(value=\"/user/{userId}/roles/{roleId}\",method = RequestMethod.GET)  \n     public String getLogin(@PathVariable(\"userId\") String userId,  \n         @PathVariable(\"roleId\") String roleId){  \n         System.out.println(\"User Id : \" + userId);  \n         System.out.println(\"Role Id : \" + roleId);  \n         return \"hello\";  \n     }  \n     @RequestMapping(value=\"/product/{productId}\",method = RequestMethod.GET)  \n     public String getProduct(@PathVariable(\"productId\") String productId){  \n           System.out.println(\"Product Id : \" + productId);  \n           return \"hello\";  \n     }  \n     @RequestMapping(value=\"/javabeat/{regexp1:[a-z-]+}\",  \n           method = RequestMethod.GET)  \n     public String getRegExp(@PathVariable(\"regexp1\") String regexp1){  \n           System.out.println(\"URI Part 1 : \" + regexp1);  \n           return \"hello\";  \n     }  \n}\n```\n## @requestParam\n@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(\"name\")，它有三个常用参数：defaultValue = \"0\", required = false, value = \"isApp\"；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。\n\n## @ResponseBody\n作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。\n\n使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；\n\n## @Component\n相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。\n\n## @Repository\n用于注解dao层，在daoImpl类上面注解。\n\n \n\n# 注：\n## 使用 @RequestMapping 来映射 Request 请求与处理器\n\n方式一、通过常见的类路径和方法路径结合访问controller方法\n\n方式二、使用uri模板\n\n```java\n@Controller\n@RequestMapping ( \"/test/{variable1}\" )\npublic class MyController {\n\n    @RequestMapping ( \"/showView/{variable2}\" )\n    public ModelAndView showView( @PathVariable String variable1, @PathVariable ( \"variable2\" ) int variable2) {\n       ModelAndView modelAndView = new ModelAndView();\n       modelAndView.setViewName( \"viewName\" );\n       modelAndView.addObject( \" 需要放到 model 中的属性名称 \" , \" 对应的属性值，它是一个对象 \" );\n       return modelAndView;\n    }\n} \n```\n**URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值**\n如URI 模板http://localhost/app/{variable1}/index.html ，这个模板里面包含一个变量variable1 ，那么当我们请求http://localhost/app/hello/index.html 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。\n代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。\n在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。\n除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：\n\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\npublic class MyController {\n    @RequestMapping ( \"*/wildcard\" )\n    public String testWildcard() {\n       System. out .println( \"wildcard------------\" );\n       return \"wildcard\" ;\n    }  \n}\n```\n当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。\n\n## 使用 @RequestMapping 的一些高级用法\n\n### params属性\n```java\n@RequestMapping (value= \"testParams\" , params={ \"param1=value1\" , \"param2\" , \"!param3\" })\n    public String testParams() {\n       System. out .println( \"test Params...........\" );\n       return \"testParams\" ;\n    }\n```\n用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&param2=value2&param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。\n\n### method属性\n```java\n@RequestMapping (value= \"testMethod\" , method={RequestMethod. GET , RequestMethod. DELETE })\n    public String testMethod() {\n       return \"method\" ;\n    }\n```\n在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。\n\n### headers属性\n```java\n@RequestMapping (value= \"testHeaders\" , headers={ \"host=localhost\" , \"Accept\" })\n    public String testHeaders() {\n       return \"headers\" ;\n    }\n```\nheaders 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。\n\n## @RequestMapping 标记的处理器方法支持的方法参数和返回类型\n\n### 支持的方法参数类型\n\n   1. HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。\n   2. Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。\n   3. InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。\n   4. 使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。\n   5. 使用@ModelAttribute 标记的参数。\n   6. java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。\n   7. 实体类。 可以用来接收上传的参数。\n   8. Spring 封装的MultipartFile 。 用来接收上传文件的。\n   9. Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。\n\n### 支持的返回类型\n\n   1. 一个包含模型和视图的ModelAndView 对象。\n   2. 一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。\n   3. 一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。\n   4. 一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。\n   5. 返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。\n   6. 如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。\n   7. 除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。\n\n## 使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\n\nSpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。\n\n当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。\n\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\npublic class MyController {\n\n    @ModelAttribute ( \"hello\" )\n    public String getModel() {\n       System. out .println( \"-------------Hello---------\" );\n       return \"world\" ;\n    }\n\n    @ModelAttribute ( \"intValue\" )\n    public int getInteger() {\n       System. out .println( \"-------------intValue---------------\" );\n       return 10;\n    }\n\n    @RequestMapping ( \"sayHello\" )\n    public void sayHello( @ModelAttribute ( \"hello\" ) String hello, @ModelAttribute ( \"intValue\" ) int num, @ModelAttribute ( \"user2\" ) User user, Writer writer, HttpSession session) throws IOException {\n       writer.write( \"Hello \" + hello + \" , Hello \" + user.getUsername() + num);\n       writer.write( \"\\r\" );\n       Enumeration enume = session.getAttributeNames();\n       while (enume.hasMoreElements())\n           writer.write(enume.nextElement() + \"\\r\" );\n    }\n\n    @ModelAttribute ( \"user2\" )\n    public User getUser(){\n       System. out .println( \"---------getUser-------------\" );\n       return new User(3, \"user2\" );\n    }\n}\n```\n\n当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：\n```\n Hello world,Hello user210\n```\n由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：\n```java\n@Controller\n@RequestMapping ( \"/myTest\" )\n@SessionAttributes (value={ \"intValue\" , \"stringValue\" }, types={User. class })\npublic class MyController {\n\n    @ModelAttribute ( \"hello\" )\n    public String getModel() {\n       System. out .println( \"-------------Hello---------\" );\n       return \"world\" ;\n    }\n\n    @ModelAttribute ( \"intValue\" )\n    public int getInteger() {\n       System. out .println( \"-------------intValue---------------\" );\n       return 10;\n    }\n   \n    @RequestMapping ( \"sayHello\" )\n    public void sayHello(Map<String, Object> map, @ModelAttribute ( \"hello\" ) String hello, @ModelAttribute ( \"intValue\" ) int num, @ModelAttribute ( \"user2\" ) User user, Writer writer, HttpServletRequest request) throws IOException {\n       map.put( \"stringValue\" , \"String\" );\n       writer.write( \"Hello \" + hello + \" , Hello \" + user.getUsername() + num);\n       writer.write( \"\\r\" );\n       HttpSession session = request.getSession();\n       Enumeration enume = session.getAttributeNames();\n       while (enume.hasMoreElements())\n           writer.write(enume.nextElement() + \"\\r\" );\n       System. out .println(session);\n    }\n\n    @ModelAttribute ( \"user2\" )\n    public User getUser() {\n       System. out .println( \"---------getUser-------------\" );\n       return new User(3, \"user2\" );\n    }\n}\n```\n在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：\n```\n Hello world,Hello user210\n```\n仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：\n```\nHello world,Hello user210\n\nuser2\n\nintValue\n\nstringValue\n```\n\n当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。\n\n## @PathVariable和@RequestParam的区别 \n\n请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = \"/page/{id}\", method = RequestMethod.GET)  \n@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。\n\n简介：\n```\nhandler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）\n\nA、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;\n\nB、处理request header部分的注解：   @RequestHeader, @CookieValue;\n\nC、处理request body部分的注解：@RequestParam,  @RequestBody;\n\nD、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;\n```\n### @PathVariable\n\n当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/owners/{ownerId}\")  \npublic class RelativePathUriTemplateController {  \n  \n  @RequestMapping(\"/pets/{petId}\")  \n  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {      \n    // implementation omitted   \n  }  \n} \n```\n上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(\"name\")指定uri template中的名称。\n\n### @RequestHeader、@CookieValue\n\n@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。\n\n示例代码：\n\n这是一个Request 的header部分：\n\nHost                    localhost:8080  \nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9  \nAccept-Language         fr,en-gb;q=0.7,en;q=0.3  \nAccept-Encoding         gzip,deflate  \nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  \nKeep-Alive              300  \n```java\n@RequestMapping(\"/displayHeaderInfo.do\")  \npublic void displayHeaderInfo(@RequestHeader(\"Accept-Encoding\") String encoding,  \n                              @RequestHeader(\"Keep-Alive\") long keepAlive)  {  \n}\n```  \n上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。\n\n## @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。\n\n例如有如下Cookie值：\n```java\n　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84\n\n@RequestMapping(\"/displayHeaderInfo.do\")  \npublic void displayHeaderInfo(@CookieValue(\"JSESSIONID\") String cookie)  {  \n} \n```\n即把JSESSIONID的值绑定到参数cookie上。\n\n## @RequestParam, @RequestBody\n\n### RequestParam \n\nA） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n\nB）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n\nC) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/pets\")  \n@SessionAttributes(\"pet\")  \npublic class EditPetForm {  \n    @RequestMapping(method = RequestMethod.GET)  \n public String setupForm(@RequestParam(\"petId\") int petId, ModelMap model) {  \n       Pet pet = this.clinic.loadPet(petId);  \n   model.addAttribute(\"pet\", pet);  \n   return \"petForm\";  \n   }\n}\n```\n### RequestBody\n\n该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；\n\n它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。\n\n因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<String, String>里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;\n\n示例代码：\n```java\n@RequestMapping(value = \"/something\", method = RequestMethod.PUT)  \npublic void handle(@RequestBody String body, Writer writer) throws IOException {  \n  writer.write(body);  \n} \n```\n## @SessionAttributes, @ModelAttribute\n\n### @SessionAttributes:\n\n该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。\n\n该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；\n\n示例代码：\n```java\n@Controller  \n@RequestMapping(\"/editPet.do\")  \n@SessionAttributes(\"pet\")  \npublic class EditPetForm {  \n    // ...   \n} \n```\n### @ModelAttribute\n\n该注解有两个用法，一个是用于方法上，一个是用于参数上；\n\n用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；\n\n用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：\n\nA） @SessionAttributes 启用的attribute 对象上；\n\nB） @ModelAttribute 用于方法上时指定的model对象；\n\nC） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。\n用到方法上@ModelAttribute的示例代码：\n```java\n@ModelAttribute  \npublic Account addAccount(@RequestParam String number) {  \n    return accountManager.findAccount(number);  \n} \n```\n这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。\n\n用在参数上的@ModelAttribute示例代码：\n```java\n@RequestMapping(value=\"/owners/{ownerId}/pets/{petId}/edit\", method = RequestMethod.POST)  \npublic String processSubmit(@ModelAttribute Pet pet) {  \n     \n} \n```\n首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。\n## <context:component-scan base-package = \"\" />\ncomponent-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐\n有了<context:component-scan>，另一个<context:annotation-config/>标签根本可以移除掉，因为已经被包含进去了\n另外<context:annotation-config/>还提供了两个子标签\n```\n1. <context:include-filter> //指定扫描的路径\n2. <context:exclude-filter> //排除扫描的路径\n```\n```xml\n<context:component-scan>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。\n```\n这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：\n```xml\n<context:component-scan base-package=\"com.tan\" use-default-filters=\"false\">\n        <context:include-filter type=\"regex\" expression=\"com.tan.*\"/>//注意后面要写.*\n</context:component-scan>\n```\n当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径\n```xml\n<context:component-scan base-package=\"com.tan\" >\n        <context:include-filter type=\"regex\" expression=\".controller.*\"/>\n        <context:include-filter type=\"regex\" expression=\".service.*\"/>\n        <context:include-filter type=\"regex\" expression=\".dao.*\"/>\n</context:component-scan>\n```\n\n效果相当于：\n```xml\n<context:component-scan base-package=\"com.tan\" >\n        <context:exclude-filter type=\"regex\" expression=\".model.*\"/>\n</context:component-scan>\n```\n\n注意：本人尝试时无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在\n","slug":"spring","published":1,"updated":"2017-05-26T05:00:50.596Z","_id":"cj4p62jcm000h80vpq8bgm3vj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"springmvc常用注解标签详解\"><a href=\"#springmvc常用注解标签详解\" class=\"headerlink\" title=\"springmvc常用注解标签详解\"></a>springmvc常用注解标签详解</h1><h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h2><p>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p>\n<ol>\n<li>在SpringMVC 的配置文件中定义MyController 的bean 对象。</li>\n<li>在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--方式一--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.host.app.web.controller.MyController\"</span>/&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--方式二--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">context:component-scan</span> <span class=\"attr\">base-package</span> = <span class=\"string\">\"com.host.app.web\"</span> /&gt;</span>//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h2><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）</p>\n<h3 id=\"value，-method；\"><a href=\"#value，-method；\" class=\"headerlink\" title=\"value， method；\"></a>value， method；</h3><ol>\n<li>value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）</li>\n<li>method:指定请求的method类型， GET、POST、PUT、DELETE等；<h3 id=\"consumes，produces\"><a href=\"#consumes，produces\" class=\"headerlink\" title=\"consumes，produces\"></a>consumes，produces</h3>consumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；<h3 id=\"params，headers\"><a href=\"#params，headers\" class=\"headerlink\" title=\"params，headers\"></a>params，headers</h3></li>\n<li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li>\n<li>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。<h2 id=\"Resource和-Autowired\"><a href=\"#Resource和-Autowired\" class=\"headerlink\" title=\"@Resource和@Autowired\"></a>@Resource和@Autowired</h2>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入<br>在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法</li>\n</ol>\n<h3 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h3><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p><strong>@Autowired</strong> </p>\n<p>@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 下面两种@Autowired只要使用一种即可</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; <span class=\"comment\">// 用于字段上</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123; <span class=\"comment\">// 用于属性的方法上</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>@Resource</strong></p>\n<p>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 下面两种@Resource只要使用一种即可</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; <span class=\"comment\">// 用于字段上</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123; <span class=\"comment\">// 用于属性的setter方法上</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p>\n<p>@Resource装配顺序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</div><div class=\"line\"></div><div class=\"line\">2.如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</div><div class=\"line\"></div><div class=\"line\">3.如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</div><div class=\"line\"></div><div class=\"line\">4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</div></pre></td></tr></table></figure></p>\n<p>@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p>\n<h2 id=\"ModelAttribute和-SessionAttributes\"><a href=\"#ModelAttribute和-SessionAttributes\" class=\"headerlink\" title=\"@ModelAttribute和 @SessionAttributes\"></a>@ModelAttribute和 @SessionAttributes</h2><p>代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p>\n<p>@SessionAttributes即将值放到session作用域中，写在class上面。</p>\n<p>具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</p>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/user/&#123;userId&#125;/roles/&#123;roleId&#125;\"</span>,method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLogin</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId,  </span></div><div class=\"line\">         @<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"roleId\"</span>)</span> String roleId)&#123;  </div><div class=\"line\">         System.out.println(<span class=\"string\">\"User Id : \"</span> + userId);  </div><div class=\"line\">         System.out.println(<span class=\"string\">\"Role Id : \"</span> + roleId);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/product/&#123;productId&#125;\"</span>,method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProduct</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"productId\"</span>)</span> String productId)</span>&#123;  </div><div class=\"line\">           System.out.println(<span class=\"string\">\"Product Id : \"</span> + productId);  </div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/javabeat/&#123;regexp1:[a-z-]+&#125;\"</span>,  </div><div class=\"line\">           method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRegExp</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"regexp1\"</span>)</span> String regexp1)</span>&#123;  </div><div class=\"line\">           System.out.println(<span class=\"string\">\"URI Part 1 : \"</span> + regexp1);  </div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"requestParam\"><a href=\"#requestParam\" class=\"headerlink\" title=\"@requestParam\"></a>@requestParam</h2><p>@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p>\n<h2 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>\n<p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><p>相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a>@Repository</h2><p>用于注解dao层，在daoImpl类上面注解。</p>\n<h1 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h1><h2 id=\"使用-RequestMapping-来映射-Request-请求与处理器\"><a href=\"#使用-RequestMapping-来映射-Request-请求与处理器\" class=\"headerlink\" title=\"使用 @RequestMapping 来映射 Request 请求与处理器\"></a>使用 @RequestMapping 来映射 Request 请求与处理器</h2><p>方式一、通过常见的类路径和方法路径结合访问controller方法</p>\n<p>方式二、使用uri模板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/test/&#123;variable1&#125;\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/showView/&#123;variable2&#125;\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">showView</span><span class=\"params\">( @PathVariable String variable1, @PathVariable ( <span class=\"string\">\"variable2\"</span> )</span> <span class=\"keyword\">int</span> variable2) </span>&#123;</div><div class=\"line\">       ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</div><div class=\"line\">       modelAndView.setViewName( <span class=\"string\">\"viewName\"</span> );</div><div class=\"line\">       modelAndView.addObject( <span class=\"string\">\" 需要放到 model 中的属性名称 \"</span> , <span class=\"string\">\" 对应的属性值，它是一个对象 \"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值</strong><br>如URI 模板<a href=\"http://localhost/app/{variable1}/index.html\" target=\"_blank\" rel=\"external\">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href=\"http://localhost/app/hello/index.html\" target=\"_blank\" rel=\"external\">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。<br>代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。<br>在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。<br>除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"*/wildcard\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testWildcard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"wildcard------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"wildcard\"</span> ;</div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。</p>\n<h2 id=\"使用-RequestMapping-的一些高级用法\"><a href=\"#使用-RequestMapping-的一些高级用法\" class=\"headerlink\" title=\"使用 @RequestMapping 的一些高级用法\"></a>使用 @RequestMapping 的一些高级用法</h2><h3 id=\"params属性\"><a href=\"#params属性\" class=\"headerlink\" title=\"params属性\"></a>params属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testParams\"</span> , params=&#123; <span class=\"string\">\"param1=value1\"</span> , <span class=\"string\">\"param2\"</span> , <span class=\"string\">\"!param3\"</span> &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testParams</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"test Params...........\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"testParams\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>\n<h3 id=\"method属性\"><a href=\"#method属性\" class=\"headerlink\" title=\"method属性\"></a>method属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testMethod\"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"method\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p>\n<h3 id=\"headers属性\"><a href=\"#headers属性\" class=\"headerlink\" title=\"headers属性\"></a>headers属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testHeaders\"</span> , headers=&#123; <span class=\"string\">\"host=localhost\"</span> , <span class=\"string\">\"Accept\"</span> &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testHeaders</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"headers\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p>\n<h2 id=\"RequestMapping-标记的处理器方法支持的方法参数和返回类型\"><a href=\"#RequestMapping-标记的处理器方法支持的方法参数和返回类型\" class=\"headerlink\" title=\"@RequestMapping 标记的处理器方法支持的方法参数和返回类型\"></a>@RequestMapping 标记的处理器方法支持的方法参数和返回类型</h2><h3 id=\"支持的方法参数类型\"><a href=\"#支持的方法参数类型\" class=\"headerlink\" title=\"支持的方法参数类型\"></a>支持的方法参数类型</h3><ol>\n<li>HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</li>\n<li>Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</li>\n<li>InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</li>\n<li>使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</li>\n<li>使用@ModelAttribute 标记的参数。</li>\n<li>java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</li>\n<li>实体类。 可以用来接收上传的参数。</li>\n<li>Spring 封装的MultipartFile 。 用来接收上传文件的。</li>\n<li>Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</li>\n</ol>\n<h3 id=\"支持的返回类型\"><a href=\"#支持的返回类型\" class=\"headerlink\" title=\"支持的返回类型\"></a>支持的返回类型</h3><ol>\n<li>一个包含模型和视图的ModelAndView 对象。</li>\n<li>一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</li>\n<li>一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</li>\n<li>一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</li>\n<li>返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</li>\n<li>如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</li>\n<li>除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</li>\n</ol>\n<h2 id=\"使用-ModelAttribute-和-SessionAttributes-传递和保存数据\"><a href=\"#使用-ModelAttribute-和-SessionAttributes-传递和保存数据\" class=\"headerlink\" title=\"使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\"></a>使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h2><p>SpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p>\n<p>当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"hello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------Hello---------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"world\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"intValue\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getInteger</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------intValue---------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"sayHello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">( @ModelAttribute ( <span class=\"string\">\"hello\"</span> )</span> String hello, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"intValue\"</span> )</span> <span class=\"keyword\">int</span> num, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"user2\"</span> )</span> User user, Writer writer, HttpSession session) <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       writer.write( <span class=\"string\">\"Hello \"</span> + hello + <span class=\"string\">\" , Hello \"</span> + user.getUsername() + num);</div><div class=\"line\">       writer.write( <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       Enumeration enume = session.getAttributeNames();</div><div class=\"line\">       <span class=\"keyword\">while</span> (enume.hasMoreElements())</div><div class=\"line\">           writer.write(enume.nextElement() + <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"user2\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"---------getUser-------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">\"user2\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div></pre></td></tr></table></figure></p>\n<p>由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span> (value=&#123; <span class=\"string\">\"intValue\"</span> , <span class=\"string\">\"stringValue\"</span> &#125;, types=&#123;User. <span class=\"class\"><span class=\"keyword\">class</span> &#125;)</span></div><div class=\"line\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyController</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"hello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------Hello---------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"world\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"intValue\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getInteger</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------intValue---------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"sayHello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class=\"string\">\"hello\"</span> )</span> String hello, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"intValue\"</span> )</span> <span class=\"keyword\">int</span> num, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"user2\"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       map.put( <span class=\"string\">\"stringValue\"</span> , <span class=\"string\">\"String\"</span> );</div><div class=\"line\">       writer.write( <span class=\"string\">\"Hello \"</span> + hello + <span class=\"string\">\" , Hello \"</span> + user.getUsername() + num);</div><div class=\"line\">       writer.write( <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       HttpSession session = request.getSession();</div><div class=\"line\">       Enumeration enume = session.getAttributeNames();</div><div class=\"line\">       <span class=\"keyword\">while</span> (enume.hasMoreElements())</div><div class=\"line\">           writer.write(enume.nextElement() + <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       System. out .println(session);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"user2\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"---------getUser-------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">\"user2\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div></pre></td></tr></table></figure></p>\n<p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div><div class=\"line\"></div><div class=\"line\">user2</div><div class=\"line\"></div><div class=\"line\">intValue</div><div class=\"line\"></div><div class=\"line\">stringValue</div></pre></td></tr></table></figure></p>\n<p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>\n<h2 id=\"PathVariable和-RequestParam的区别\"><a href=\"#PathVariable和-RequestParam的区别\" class=\"headerlink\" title=\"@PathVariable和@RequestParam的区别\"></a>@PathVariable和@RequestParam的区别</h2><p>请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。</p>\n<p>简介：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）</div><div class=\"line\"></div><div class=\"line\">A、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;</div><div class=\"line\"></div><div class=\"line\">B、处理request header部分的注解：   @RequestHeader, @CookieValue;</div><div class=\"line\"></div><div class=\"line\">C、处理request body部分的注解：@RequestParam,  @RequestBody;</div><div class=\"line\"></div><div class=\"line\">D、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;</div></pre></td></tr></table></figure></p>\n<h3 id=\"PathVariable-1\"><a href=\"#PathVariable-1\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/owners/&#123;ownerId&#125;\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelativePathUriTemplateController</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pets/&#123;petId&#125;\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findPet</span><span class=\"params\">(@PathVariable String ownerId, @PathVariable String petId, Model model)</span> </span>&#123;      </div><div class=\"line\">    <span class=\"comment\">// implementation omitted   </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p>\n<h3 id=\"RequestHeader、-CookieValue\"><a href=\"#RequestHeader、-CookieValue\" class=\"headerlink\" title=\"@RequestHeader、@CookieValue\"></a>@RequestHeader、@CookieValue</h3><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p>\n<p>示例代码：</p>\n<p>这是一个Request 的header部分：</p>\n<p>Host                    localhost:8080<br>Accept                  text/html,application/xhtml+xml,application/xml;q=0.9<br>Accept-Language         fr,en-gb;q=0.7,en;q=0.3<br>Accept-Encoding         gzip,deflate<br>Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7<br>Keep-Alive              300<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(\"/displayHeaderInfo.do\")  </div><div class=\"line\">public void displayHeaderInfo(@RequestHeader(\"Accept-Encoding\") String encoding,  </div><div class=\"line\">                              @RequestHeader(\"Keep-Alive\") long keepAlive)  &#123;  </div><div class=\"line\">&#125;</div><div class=\"line\">```  </div><div class=\"line\">上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</div><div class=\"line\"></div><div class=\"line\">## @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</div><div class=\"line\"></div><div class=\"line\">例如有如下Cookie值：</div><div class=\"line\">```java</div><div class=\"line\">　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(\"/displayHeaderInfo.do\")  </div><div class=\"line\">public void displayHeaderInfo(@CookieValue(\"JSESSIONID\") String cookie)  &#123;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>即把JSESSIONID的值绑定到参数cookie上。</p>\n<h2 id=\"RequestParam-RequestBody\"><a href=\"#RequestParam-RequestBody\" class=\"headerlink\" title=\"@RequestParam, @RequestBody\"></a>@RequestParam, @RequestBody</h2><h3 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"RequestParam\"></a>RequestParam</h3><p>A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>\n<p>B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p>\n<p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pets\"</span>)  </div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span>(<span class=\"string\">\"pet\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditPetForm</span> </span>&#123;  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">setupForm</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"petId\"</span>)</span> <span class=\"keyword\">int</span> petId, ModelMap model) </span>&#123;  </div><div class=\"line\">       Pet pet = <span class=\"keyword\">this</span>.clinic.loadPet(petId);  </div><div class=\"line\">   model.addAttribute(<span class=\"string\">\"pet\"</span>, pet);  </div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"petForm\"</span>;  </div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"RequestBody\"></a>RequestBody</h3><p>该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p>\n<p>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p>\n<p>因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<string, string=\"\">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/something\"</span>, method = RequestMethod.PUT)  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(@RequestBody String body, Writer writer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;  </div><div class=\"line\">  writer.write(body);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"SessionAttributes-ModelAttribute\"><a href=\"#SessionAttributes-ModelAttribute\" class=\"headerlink\" title=\"@SessionAttributes, @ModelAttribute\"></a>@SessionAttributes, @ModelAttribute</h2><h3 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes:\"></a>@SessionAttributes:</h3><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p>\n<p>该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editPet.do\"</span>)  </div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span>(<span class=\"string\">\"pet\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditPetForm</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// ...   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h3><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p>\n<p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p>\n<p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>\n<p>A） @SessionAttributes 启用的attribute 对象上；</p>\n<p>B） @ModelAttribute 用于方法上时指定的model对象；</p>\n<p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。<br>用到方法上@ModelAttribute的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ModelAttribute</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Account <span class=\"title\">addAccount</span><span class=\"params\">(@RequestParam String number)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> accountManager.findAccount(number);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p>\n<p>用在参数上的@ModelAttribute示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit\"</span>, method = RequestMethod.POST)  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">processSubmit</span><span class=\"params\">(@ModelAttribute Pet pet)</span> </span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><context:component-scan base-package=\"\"></context:component-scan></h2><p>component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐<br>有了<context:component-scan>，另一个<context:annotation-config>标签根本可以移除掉，因为已经被包含进去了<br>另外<context:annotation-config>还提供了两个子标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. &lt;context:include-filter&gt; //指定扫描的路径</div><div class=\"line\">2. &lt;context:exclude-filter&gt; //排除扫描的路径</div></pre></td></tr></table></figure></context:annotation-config></context:annotation-config></context:component-scan></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span>&gt;</span>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。</div></pre></td></tr></table></figure>\n<p>这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"com.tan.*\"</span>/&gt;</span>//注意后面要写.*</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></context:include-filter></p>\n<p>当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".controller.*\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".service.*\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".dao.*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果相当于：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".model.*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>注意：本人尝试时无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在</context:exclude-filter></context:include-filter></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"springmvc常用注解标签详解\"><a href=\"#springmvc常用注解标签详解\" class=\"headerlink\" title=\"springmvc常用注解标签详解\"></a>springmvc常用注解标签详解</h1><h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h2><p>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p>\n<ol>\n<li>在SpringMVC 的配置文件中定义MyController 的bean 对象。</li>\n<li>在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--方式一--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.host.app.web.controller.MyController\"</span>/&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--方式二--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">context:component-scan</span> <span class=\"attr\">base-package</span> = <span class=\"string\">\"com.host.app.web\"</span> /&gt;</span>//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<h2 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h2><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）</p>\n<h3 id=\"value，-method；\"><a href=\"#value，-method；\" class=\"headerlink\" title=\"value， method；\"></a>value， method；</h3><ol>\n<li>value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）</li>\n<li>method:指定请求的method类型， GET、POST、PUT、DELETE等；<h3 id=\"consumes，produces\"><a href=\"#consumes，produces\" class=\"headerlink\" title=\"consumes，produces\"></a>consumes，produces</h3>consumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；<h3 id=\"params，headers\"><a href=\"#params，headers\" class=\"headerlink\" title=\"params，headers\"></a>params，headers</h3></li>\n<li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li>\n<li>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。<h2 id=\"Resource和-Autowired\"><a href=\"#Resource和-Autowired\" class=\"headerlink\" title=\"@Resource和@Autowired\"></a>@Resource和@Autowired</h2>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入<br>在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法</li>\n</ol>\n<h3 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h3><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p><strong>@Autowired</strong> </p>\n<p>@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 下面两种@Autowired只要使用一种即可</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; <span class=\"comment\">// 用于字段上</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123; <span class=\"comment\">// 用于属性的方法上</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>@Resource</strong></p>\n<p>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImpl</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 下面两种@Resource只要使用一种即可</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao; <span class=\"comment\">// 用于字段上</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name=<span class=\"string\">\"userDao\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123; <span class=\"comment\">// 用于属性的setter方法上</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p>\n<p>@Resource装配顺序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</div><div class=\"line\"></div><div class=\"line\">2.如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</div><div class=\"line\"></div><div class=\"line\">3.如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</div><div class=\"line\"></div><div class=\"line\">4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</div></pre></td></tr></table></figure></p>\n<p>@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p>\n<h2 id=\"ModelAttribute和-SessionAttributes\"><a href=\"#ModelAttribute和-SessionAttributes\" class=\"headerlink\" title=\"@ModelAttribute和 @SessionAttributes\"></a>@ModelAttribute和 @SessionAttributes</h2><p>代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p>\n<p>@SessionAttributes即将值放到session作用域中，写在class上面。</p>\n<p>具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</p>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/user/&#123;userId&#125;/roles/&#123;roleId&#125;\"</span>,method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLogin</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId,  </span></div><div class=\"line\">         @<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"roleId\"</span>)</span> String roleId)&#123;  </div><div class=\"line\">         System.out.println(<span class=\"string\">\"User Id : \"</span> + userId);  </div><div class=\"line\">         System.out.println(<span class=\"string\">\"Role Id : \"</span> + roleId);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/product/&#123;productId&#125;\"</span>,method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProduct</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"productId\"</span>)</span> String productId)</span>&#123;  </div><div class=\"line\">           System.out.println(<span class=\"string\">\"Product Id : \"</span> + productId);  </div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/javabeat/&#123;regexp1:[a-z-]+&#125;\"</span>,  </div><div class=\"line\">           method = RequestMethod.GET)  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRegExp</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"regexp1\"</span>)</span> String regexp1)</span>&#123;  </div><div class=\"line\">           System.out.println(<span class=\"string\">\"URI Part 1 : \"</span> + regexp1);  </div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"requestParam\"><a href=\"#requestParam\" class=\"headerlink\" title=\"@requestParam\"></a>@requestParam</h2><p>@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p>\n<h2 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>\n<p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h2><p>相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a>@Repository</h2><p>用于注解dao层，在daoImpl类上面注解。</p>\n<h1 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h1><h2 id=\"使用-RequestMapping-来映射-Request-请求与处理器\"><a href=\"#使用-RequestMapping-来映射-Request-请求与处理器\" class=\"headerlink\" title=\"使用 @RequestMapping 来映射 Request 请求与处理器\"></a>使用 @RequestMapping 来映射 Request 请求与处理器</h2><p>方式一、通过常见的类路径和方法路径结合访问controller方法</p>\n<p>方式二、使用uri模板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/test/&#123;variable1&#125;\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/showView/&#123;variable2&#125;\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">showView</span><span class=\"params\">( @PathVariable String variable1, @PathVariable ( <span class=\"string\">\"variable2\"</span> )</span> <span class=\"keyword\">int</span> variable2) </span>&#123;</div><div class=\"line\">       ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</div><div class=\"line\">       modelAndView.setViewName( <span class=\"string\">\"viewName\"</span> );</div><div class=\"line\">       modelAndView.addObject( <span class=\"string\">\" 需要放到 model 中的属性名称 \"</span> , <span class=\"string\">\" 对应的属性值，它是一个对象 \"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值</strong><br>如URI 模板<a href=\"http://localhost/app/{variable1}/index.html\" target=\"_blank\" rel=\"external\">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href=\"http://localhost/app/hello/index.html\" target=\"_blank\" rel=\"external\">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。<br>代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。<br>在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。<br>除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"*/wildcard\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testWildcard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"wildcard------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"wildcard\"</span> ;</div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。</p>\n<h2 id=\"使用-RequestMapping-的一些高级用法\"><a href=\"#使用-RequestMapping-的一些高级用法\" class=\"headerlink\" title=\"使用 @RequestMapping 的一些高级用法\"></a>使用 @RequestMapping 的一些高级用法</h2><h3 id=\"params属性\"><a href=\"#params属性\" class=\"headerlink\" title=\"params属性\"></a>params属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testParams\"</span> , params=&#123; <span class=\"string\">\"param1=value1\"</span> , <span class=\"string\">\"param2\"</span> , <span class=\"string\">\"!param3\"</span> &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testParams</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"test Params...........\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"testParams\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>\n<h3 id=\"method属性\"><a href=\"#method属性\" class=\"headerlink\" title=\"method属性\"></a>method属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testMethod\"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"method\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p>\n<h3 id=\"headers属性\"><a href=\"#headers属性\" class=\"headerlink\" title=\"headers属性\"></a>headers属性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span> (value= <span class=\"string\">\"testHeaders\"</span> , headers=&#123; <span class=\"string\">\"host=localhost\"</span> , <span class=\"string\">\"Accept\"</span> &#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testHeaders</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"headers\"</span> ;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p>\n<h2 id=\"RequestMapping-标记的处理器方法支持的方法参数和返回类型\"><a href=\"#RequestMapping-标记的处理器方法支持的方法参数和返回类型\" class=\"headerlink\" title=\"@RequestMapping 标记的处理器方法支持的方法参数和返回类型\"></a>@RequestMapping 标记的处理器方法支持的方法参数和返回类型</h2><h3 id=\"支持的方法参数类型\"><a href=\"#支持的方法参数类型\" class=\"headerlink\" title=\"支持的方法参数类型\"></a>支持的方法参数类型</h3><ol>\n<li>HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</li>\n<li>Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</li>\n<li>InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</li>\n<li>使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</li>\n<li>使用@ModelAttribute 标记的参数。</li>\n<li>java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</li>\n<li>实体类。 可以用来接收上传的参数。</li>\n<li>Spring 封装的MultipartFile 。 用来接收上传文件的。</li>\n<li>Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</li>\n</ol>\n<h3 id=\"支持的返回类型\"><a href=\"#支持的返回类型\" class=\"headerlink\" title=\"支持的返回类型\"></a>支持的返回类型</h3><ol>\n<li>一个包含模型和视图的ModelAndView 对象。</li>\n<li>一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</li>\n<li>一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</li>\n<li>一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</li>\n<li>返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</li>\n<li>如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</li>\n<li>除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</li>\n</ol>\n<h2 id=\"使用-ModelAttribute-和-SessionAttributes-传递和保存数据\"><a href=\"#使用-ModelAttribute-和-SessionAttributes-传递和保存数据\" class=\"headerlink\" title=\"使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据\"></a>使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h2><p>SpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p>\n<p>当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"hello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------Hello---------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"world\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"intValue\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getInteger</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------intValue---------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"sayHello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">( @ModelAttribute ( <span class=\"string\">\"hello\"</span> )</span> String hello, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"intValue\"</span> )</span> <span class=\"keyword\">int</span> num, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"user2\"</span> )</span> User user, Writer writer, HttpSession session) <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       writer.write( <span class=\"string\">\"Hello \"</span> + hello + <span class=\"string\">\" , Hello \"</span> + user.getUsername() + num);</div><div class=\"line\">       writer.write( <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       Enumeration enume = session.getAttributeNames();</div><div class=\"line\">       <span class=\"keyword\">while</span> (enume.hasMoreElements())</div><div class=\"line\">           writer.write(enume.nextElement() + <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"user2\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"---------getUser-------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">\"user2\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div></pre></td></tr></table></figure></p>\n<p>由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"/myTest\"</span> )</div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span> (value=&#123; <span class=\"string\">\"intValue\"</span> , <span class=\"string\">\"stringValue\"</span> &#125;, types=&#123;User. <span class=\"class\"><span class=\"keyword\">class</span> &#125;)</span></div><div class=\"line\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyController</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"hello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------Hello---------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"world\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"intValue\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getInteger</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"-------------intValue---------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span> ( <span class=\"string\">\"sayHello\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class=\"string\">\"hello\"</span> )</span> String hello, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"intValue\"</span> )</span> <span class=\"keyword\">int</span> num, @<span class=\"title\">ModelAttribute</span> <span class=\"params\">( <span class=\"string\">\"user2\"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">       map.put( <span class=\"string\">\"stringValue\"</span> , <span class=\"string\">\"String\"</span> );</div><div class=\"line\">       writer.write( <span class=\"string\">\"Hello \"</span> + hello + <span class=\"string\">\" , Hello \"</span> + user.getUsername() + num);</div><div class=\"line\">       writer.write( <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       HttpSession session = request.getSession();</div><div class=\"line\">       Enumeration enume = session.getAttributeNames();</div><div class=\"line\">       <span class=\"keyword\">while</span> (enume.hasMoreElements())</div><div class=\"line\">           writer.write(enume.nextElement() + <span class=\"string\">\"\\r\"</span> );</div><div class=\"line\">       System. out .println(session);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ModelAttribute</span> ( <span class=\"string\">\"user2\"</span> )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       System. out .println( <span class=\"string\">\"---------getUser-------------\"</span> );</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">\"user2\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div></pre></td></tr></table></figure></p>\n<p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello world,Hello user210</div><div class=\"line\"></div><div class=\"line\">user2</div><div class=\"line\"></div><div class=\"line\">intValue</div><div class=\"line\"></div><div class=\"line\">stringValue</div></pre></td></tr></table></figure></p>\n<p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>\n<h2 id=\"PathVariable和-RequestParam的区别\"><a href=\"#PathVariable和-RequestParam的区别\" class=\"headerlink\" title=\"@PathVariable和@RequestParam的区别\"></a>@PathVariable和@RequestParam的区别</h2><p>请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。</p>\n<p>简介：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）</div><div class=\"line\"></div><div class=\"line\">A、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;</div><div class=\"line\"></div><div class=\"line\">B、处理request header部分的注解：   @RequestHeader, @CookieValue;</div><div class=\"line\"></div><div class=\"line\">C、处理request body部分的注解：@RequestParam,  @RequestBody;</div><div class=\"line\"></div><div class=\"line\">D、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;</div></pre></td></tr></table></figure></p>\n<h3 id=\"PathVariable-1\"><a href=\"#PathVariable-1\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/owners/&#123;ownerId&#125;\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelativePathUriTemplateController</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pets/&#123;petId&#125;\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findPet</span><span class=\"params\">(@PathVariable String ownerId, @PathVariable String petId, Model model)</span> </span>&#123;      </div><div class=\"line\">    <span class=\"comment\">// implementation omitted   </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p>\n<h3 id=\"RequestHeader、-CookieValue\"><a href=\"#RequestHeader、-CookieValue\" class=\"headerlink\" title=\"@RequestHeader、@CookieValue\"></a>@RequestHeader、@CookieValue</h3><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p>\n<p>示例代码：</p>\n<p>这是一个Request 的header部分：</p>\n<p>Host                    localhost:8080<br>Accept                  text/html,application/xhtml+xml,application/xml;q=0.9<br>Accept-Language         fr,en-gb;q=0.7,en;q=0.3<br>Accept-Encoding         gzip,deflate<br>Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7<br>Keep-Alive              300<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(\"/displayHeaderInfo.do\")  </div><div class=\"line\">public void displayHeaderInfo(@RequestHeader(\"Accept-Encoding\") String encoding,  </div><div class=\"line\">                              @RequestHeader(\"Keep-Alive\") long keepAlive)  &#123;  </div><div class=\"line\">&#125;</div><div class=\"line\">```  </div><div class=\"line\">上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</div><div class=\"line\"></div><div class=\"line\">## @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</div><div class=\"line\"></div><div class=\"line\">例如有如下Cookie值：</div><div class=\"line\">```java</div><div class=\"line\">　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(\"/displayHeaderInfo.do\")  </div><div class=\"line\">public void displayHeaderInfo(@CookieValue(\"JSESSIONID\") String cookie)  &#123;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>即把JSESSIONID的值绑定到参数cookie上。</p>\n<h2 id=\"RequestParam-RequestBody\"><a href=\"#RequestParam-RequestBody\" class=\"headerlink\" title=\"@RequestParam, @RequestBody\"></a>@RequestParam, @RequestBody</h2><h3 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"RequestParam\"></a>RequestParam</h3><p>A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>\n<p>B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p>\n<p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pets\"</span>)  </div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span>(<span class=\"string\">\"pet\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditPetForm</span> </span>&#123;  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">setupForm</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"petId\"</span>)</span> <span class=\"keyword\">int</span> petId, ModelMap model) </span>&#123;  </div><div class=\"line\">       Pet pet = <span class=\"keyword\">this</span>.clinic.loadPet(petId);  </div><div class=\"line\">   model.addAttribute(<span class=\"string\">\"pet\"</span>, pet);  </div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"petForm\"</span>;  </div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"RequestBody\"></a>RequestBody</h3><p>该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p>\n<p>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p>\n<p>因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<string, string=\"\">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/something\"</span>, method = RequestMethod.PUT)  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(@RequestBody String body, Writer writer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;  </div><div class=\"line\">  writer.write(body);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"SessionAttributes-ModelAttribute\"><a href=\"#SessionAttributes-ModelAttribute\" class=\"headerlink\" title=\"@SessionAttributes, @ModelAttribute\"></a>@SessionAttributes, @ModelAttribute</h2><h3 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes:\"></a>@SessionAttributes:</h3><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p>\n<p>该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p>\n<p>示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span>  </div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editPet.do\"</span>)  </div><div class=\"line\"><span class=\"meta\">@SessionAttributes</span>(<span class=\"string\">\"pet\"</span>)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditPetForm</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// ...   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h3><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p>\n<p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p>\n<p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>\n<p>A） @SessionAttributes 启用的attribute 对象上；</p>\n<p>B） @ModelAttribute 用于方法上时指定的model对象；</p>\n<p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。<br>用到方法上@ModelAttribute的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ModelAttribute</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Account <span class=\"title\">addAccount</span><span class=\"params\">(@RequestParam String number)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> accountManager.findAccount(number);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p>\n<p>用在参数上的@ModelAttribute示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit\"</span>, method = RequestMethod.POST)  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">processSubmit</span><span class=\"params\">(@ModelAttribute Pet pet)</span> </span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><context:component-scan base-package=\"\"></context:component-scan></h2><p>component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐<br>有了<context:component-scan>，另一个<context:annotation-config>标签根本可以移除掉，因为已经被包含进去了<br>另外<context:annotation-config>还提供了两个子标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. &lt;context:include-filter&gt; //指定扫描的路径</div><div class=\"line\">2. &lt;context:exclude-filter&gt; //排除扫描的路径</div></pre></td></tr></table></figure></context:annotation-config></context:annotation-config></context:component-scan></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span>&gt;</span>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。</div></pre></td></tr></table></figure>\n<p>这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"com.tan.*\"</span>/&gt;</span>//注意后面要写.*</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></context:include-filter></p>\n<p>当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".controller.*\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".service.*\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".dao.*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果相当于：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.tan\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\".model.*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>注意：本人尝试时无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在</context:exclude-filter></context:include-filter></p>"},{"title":"webmagic 搭建","date":"2017-07-09T22:16:13.000Z","_content":"# 简介\n![](http://code4craft.github.io/images/posts/webmagic.png)\n+ WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。\n+ 简单的API，可快速上手\n+ 模块化的结构，可轻松扩展.WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，\n+ 提供多线程和分布式支持(官方提供redis分布式支持)\n<!-- more -->\n# 开发环境搭建\n+ pom 引用\n```xml\n   <dependencies>\n        <!--核心库-->\n        <dependency>\n            <groupId>us.codecraft</groupId>\n            <artifactId>webmagic-core</artifactId>\n            <version>0.7.2</version>\n        </dependency>\n        <!--扩展 包 redis分布式支持...-->\n        <dependency>\n            <groupId>us.codecraft</groupId>\n            <artifactId>webmagic-extension</artifactId>\n            <version>0.7.2</version>\n        </dependency>\n    </dependencies>\n```\n+ pom 插件(指定 jar 启动class)\n\n```xml\n <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.6</source>\n                    <target>1.6</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.0.0</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>com.es.core.App</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n```\n## 爬美团技术博客文章\n+ 定义pageprocessor\n```java\npublic class MeituanPageProcessor implements PageProcessor {\n\n    private Site site = Site.me().setRetryTimes(3).setSleepTime(1000);\n\n    @Override\n    public void process(Page page) {\n        List<String> targets=new ArrayList<String>();\n        Selectable links=page.getHtml().links();\n        for(String link : links.all())\n        {\n           if (link.contains(\"tech.meituan.com\")&&link.contains(\".html\")){\n               targets.add(link);\n           }\n        }\n        /// 相关链接\n        page.addTargetRequests(targets);\n        System.out.println(page.getUrl());\n    }\n\n    @Override\n    public Site getSite() {\n        return site;\n    }\n}\n\n```\n+ 启动\n```java\n\npublic  class  App{\n    public static void main(String[] args) {\n        InputStream stream=App.class.getClassLoader().getResourceAsStream(\"app.properties\");\n        Properties properties=new Properties();\n        try {\n            properties.load(stream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        String host=properties.getProperty(\"redis.config.host\");\n        int port= Integer.parseInt(properties.getProperty(\"redis.config.port\"));\n        Spider spider=Spider.create(new MeituanPageProcessor());\n        GenericObjectPoolConfig config=new GenericObjectPoolConfig();\n        JedisPool pool=new JedisPool(config,host,port,10000,\"********\",false);\n        spider.setScheduler(new RedisScheduler(pool));\n        spider.addUrl(\"http://tech.meituan.com/\");\n        spider.thread(5);\n        spider.run();\n    }\n}\n```\n## 运行\n```\nmvn install\njava -jar com.es-1.0-SNAPSHOT.jar\n```\n","source":"_posts/webmagicinit.md","raw":"---\ntitle: webmagic 搭建\ndate: 2017-07-10 06:16:13\ntags: webmagic\n---\n# 简介\n![](http://code4craft.github.io/images/posts/webmagic.png)\n+ WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。\n+ 简单的API，可快速上手\n+ 模块化的结构，可轻松扩展.WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，\n+ 提供多线程和分布式支持(官方提供redis分布式支持)\n<!-- more -->\n# 开发环境搭建\n+ pom 引用\n```xml\n   <dependencies>\n        <!--核心库-->\n        <dependency>\n            <groupId>us.codecraft</groupId>\n            <artifactId>webmagic-core</artifactId>\n            <version>0.7.2</version>\n        </dependency>\n        <!--扩展 包 redis分布式支持...-->\n        <dependency>\n            <groupId>us.codecraft</groupId>\n            <artifactId>webmagic-extension</artifactId>\n            <version>0.7.2</version>\n        </dependency>\n    </dependencies>\n```\n+ pom 插件(指定 jar 启动class)\n\n```xml\n <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.6</source>\n                    <target>1.6</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.0.0</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>com.es.core.App</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n```\n## 爬美团技术博客文章\n+ 定义pageprocessor\n```java\npublic class MeituanPageProcessor implements PageProcessor {\n\n    private Site site = Site.me().setRetryTimes(3).setSleepTime(1000);\n\n    @Override\n    public void process(Page page) {\n        List<String> targets=new ArrayList<String>();\n        Selectable links=page.getHtml().links();\n        for(String link : links.all())\n        {\n           if (link.contains(\"tech.meituan.com\")&&link.contains(\".html\")){\n               targets.add(link);\n           }\n        }\n        /// 相关链接\n        page.addTargetRequests(targets);\n        System.out.println(page.getUrl());\n    }\n\n    @Override\n    public Site getSite() {\n        return site;\n    }\n}\n\n```\n+ 启动\n```java\n\npublic  class  App{\n    public static void main(String[] args) {\n        InputStream stream=App.class.getClassLoader().getResourceAsStream(\"app.properties\");\n        Properties properties=new Properties();\n        try {\n            properties.load(stream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        String host=properties.getProperty(\"redis.config.host\");\n        int port= Integer.parseInt(properties.getProperty(\"redis.config.port\"));\n        Spider spider=Spider.create(new MeituanPageProcessor());\n        GenericObjectPoolConfig config=new GenericObjectPoolConfig();\n        JedisPool pool=new JedisPool(config,host,port,10000,\"********\",false);\n        spider.setScheduler(new RedisScheduler(pool));\n        spider.addUrl(\"http://tech.meituan.com/\");\n        spider.thread(5);\n        spider.run();\n    }\n}\n```\n## 运行\n```\nmvn install\njava -jar com.es-1.0-SNAPSHOT.jar\n```\n","slug":"webmagicinit","published":1,"updated":"2017-07-12T01:02:24.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj50axbqj0000s0vpxn6oaow8","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"http://code4craft.github.io/images/posts/webmagic.png\" alt=\"\"></p>\n<ul>\n<li>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</li>\n<li>简单的API，可快速上手</li>\n<li>模块化的结构，可轻松扩展.WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，</li>\n<li>提供多线程和分布式支持(官方提供redis分布式支持)<a id=\"more\"></a>\n<h1 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h1></li>\n<li><p>pom 引用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--核心库--&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>us.codecraft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webmagic-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--扩展 包 redis分布式支持...--&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>us.codecraft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webmagic-extension<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pom 插件(指定 jar 启动class)</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;<span class=\"name\">transformers</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;<span class=\"name\">transformer</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"</span>&gt;</span></div><div class=\"line\">                                   <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.es.core.App<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;/<span class=\"name\">transformer</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;/<span class=\"name\">transformers</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"爬美团技术博客文章\"><a href=\"#爬美团技术博客文章\" class=\"headerlink\" title=\"爬美团技术博客文章\"></a>爬美团技术博客文章</h2><ul>\n<li><p>定义pageprocessor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeituanPageProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">PageProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Site site = Site.me().setRetryTimes(<span class=\"number\">3</span>).setSleepTime(<span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(Page page)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; targets=<span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">        Selectable links=page.getHtml().links();</div><div class=\"line\">        <span class=\"keyword\">for</span>(String link : links.all())</div><div class=\"line\">        &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (link.contains(<span class=\"string\">\"tech.meituan.com\"</span>)&amp;&amp;link.contains(<span class=\"string\">\".html\"</span>))&#123;</div><div class=\"line\">               targets.add(link);</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">/// 相关链接</span></div><div class=\"line\">        page.addTargetRequests(targets);</div><div class=\"line\">        System.out.println(page.getUrl());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Site <span class=\"title\">getSite</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> site;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">App</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        InputStream stream=App.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"app.properties\"</span>);</div><div class=\"line\">        Properties properties=<span class=\"keyword\">new</span> Properties();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            properties.load(stream);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String host=properties.getProperty(<span class=\"string\">\"redis.config.host\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> port= Integer.parseInt(properties.getProperty(<span class=\"string\">\"redis.config.port\"</span>));</div><div class=\"line\">        Spider spider=Spider.create(<span class=\"keyword\">new</span> MeituanPageProcessor());</div><div class=\"line\">        GenericObjectPoolConfig config=<span class=\"keyword\">new</span> GenericObjectPoolConfig();</div><div class=\"line\">        JedisPool pool=<span class=\"keyword\">new</span> JedisPool(config,host,port,<span class=\"number\">10000</span>,<span class=\"string\">\"********\"</span>,<span class=\"keyword\">false</span>);</div><div class=\"line\">        spider.setScheduler(<span class=\"keyword\">new</span> RedisScheduler(pool));</div><div class=\"line\">        spider.addUrl(<span class=\"string\">\"http://tech.meituan.com/\"</span>);</div><div class=\"line\">        spider.thread(<span class=\"number\">5</span>);</div><div class=\"line\">        spider.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn install</div><div class=\"line\">java -jar com.es-1.0-SNAPSHOT.jar</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"http://code4craft.github.io/images/posts/webmagic.png\" alt=\"\"></p>\n<ul>\n<li>WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</li>\n<li>简单的API，可快速上手</li>\n<li>模块化的结构，可轻松扩展.WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，</li>\n<li>提供多线程和分布式支持(官方提供redis分布式支持)","more":"<h1 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h1></li>\n<li><p>pom 引用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--核心库--&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>us.codecraft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webmagic-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--扩展 包 redis分布式支持...--&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>us.codecraft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>webmagic-extension<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pom 插件(指定 jar 启动class)</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;<span class=\"name\">transformers</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;<span class=\"name\">transformer</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"</span>&gt;</span></div><div class=\"line\">                                   <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.es.core.App<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;/<span class=\"name\">transformer</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;/<span class=\"name\">transformers</span>&gt;</span></div><div class=\"line\">                       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"爬美团技术博客文章\"><a href=\"#爬美团技术博客文章\" class=\"headerlink\" title=\"爬美团技术博客文章\"></a>爬美团技术博客文章</h2><ul>\n<li><p>定义pageprocessor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeituanPageProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">PageProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Site site = Site.me().setRetryTimes(<span class=\"number\">3</span>).setSleepTime(<span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(Page page)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; targets=<span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">        Selectable links=page.getHtml().links();</div><div class=\"line\">        <span class=\"keyword\">for</span>(String link : links.all())</div><div class=\"line\">        &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (link.contains(<span class=\"string\">\"tech.meituan.com\"</span>)&amp;&amp;link.contains(<span class=\"string\">\".html\"</span>))&#123;</div><div class=\"line\">               targets.add(link);</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">/// 相关链接</span></div><div class=\"line\">        page.addTargetRequests(targets);</div><div class=\"line\">        System.out.println(page.getUrl());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Site <span class=\"title\">getSite</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> site;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">App</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        InputStream stream=App.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"app.properties\"</span>);</div><div class=\"line\">        Properties properties=<span class=\"keyword\">new</span> Properties();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            properties.load(stream);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String host=properties.getProperty(<span class=\"string\">\"redis.config.host\"</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> port= Integer.parseInt(properties.getProperty(<span class=\"string\">\"redis.config.port\"</span>));</div><div class=\"line\">        Spider spider=Spider.create(<span class=\"keyword\">new</span> MeituanPageProcessor());</div><div class=\"line\">        GenericObjectPoolConfig config=<span class=\"keyword\">new</span> GenericObjectPoolConfig();</div><div class=\"line\">        JedisPool pool=<span class=\"keyword\">new</span> JedisPool(config,host,port,<span class=\"number\">10000</span>,<span class=\"string\">\"********\"</span>,<span class=\"keyword\">false</span>);</div><div class=\"line\">        spider.setScheduler(<span class=\"keyword\">new</span> RedisScheduler(pool));</div><div class=\"line\">        spider.addUrl(<span class=\"string\">\"http://tech.meituan.com/\"</span>);</div><div class=\"line\">        spider.thread(<span class=\"number\">5</span>);</div><div class=\"line\">        spider.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn install</div><div class=\"line\">java -jar com.es-1.0-SNAPSHOT.jar</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj4p62h5z000080vptcnicri0","tag_id":"cj4p62h6e000180vpanywp596","_id":"cj4p62h6h000280vp5sw72qn3"},{"post_id":"cj4p62h6l000380vpg45iwcq0","tag_id":"cj4p62h6q000580vp9gvkbudc","_id":"cj4p62h70000880vp3rnzu4kn"},{"post_id":"cj4p62h6n000480vp7bwdat40","tag_id":"cj4p62h6z000780vpohh45v5b","_id":"cj4p62h75000a80vpfu3fy3wy"},{"post_id":"cj4p62h6w000680vp42dgytw8","tag_id":"cj4p62h71000980vps93595ln","_id":"cj4p62h76000b80vp3zk16p96"},{"post_id":"cj4p62j9x000c80vplzznczd9","tag_id":"cj4p62jbv000e80vpa6entjaj","_id":"cj4p62jcw000j80vpzmtpq7ln"},{"post_id":"cj4p62ja2000d80vp915k4zo0","tag_id":"cj4p62jct000i80vpg5132qfb","_id":"cj4p62jd1000l80vpb47et016"},{"post_id":"cj4p62jcc000g80vpduply09z","tag_id":"cj4p62jd0000k80vp5hj43rsr","_id":"cj4p62jd8000n80vpkoaa268r"},{"post_id":"cj4p62jcm000h80vpq8bgm3vj","tag_id":"cj4p62jd1000m80vpkqv93m3r","_id":"cj4p62jd9000o80vpp0roufqc"},{"post_id":"cj50axbqj0000s0vpxn6oaow8","tag_id":"cj50axbqv0001s0vp7g3csnbu","_id":"cj50axbrj0002s0vpbe548sem"}],"Tag":[{"name":"MVVM","_id":"cj4p62h6e000180vpanywp596"},{"name":"hexo","_id":"cj4p62h6q000580vp9gvkbudc"},{"name":"前端","_id":"cj4p62h6z000780vpohh45v5b"},{"name":"tomact","_id":"cj4p62h71000980vps93595ln"},{"name":"SVN","_id":"cj4p62jbv000e80vpa6entjaj"},{"name":"redis","_id":"cj4p62jct000i80vpg5132qfb"},{"name":"Windbg","_id":"cj4p62jd0000k80vp5hj43rsr"},{"name":"spring","_id":"cj4p62jd1000m80vpkqv93m3r"},{"name":"webmagic","_id":"cj50axbqv0001s0vp7g3csnbu"}]}}